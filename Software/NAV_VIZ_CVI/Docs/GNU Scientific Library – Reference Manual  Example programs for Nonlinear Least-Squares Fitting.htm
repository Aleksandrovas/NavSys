<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><!-- Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 The GSL Team.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "Free Software
Needs Free Documentation", the Front-Cover text being "A GNU Manual",
and with the Back-Cover Text being (a) (see below). A copy of the
license is included in the section entitled "GNU Free Documentation
License".

(a) The Back-Cover Text is: "You have the freedom to copy and modify this
GNU Manual." --><!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ --><head>
<title>GNU Scientific Library – Reference Manual: Example programs for Nonlinear Least-Squares Fitting</title>

<meta name="description" content="GNU Scientific Library – Reference Manual: Example programs for Nonlinear Least-Squares Fitting">
<meta name="keywords" content="GNU Scientific Library – Reference Manual: Example programs for Nonlinear Least-Squares Fitting">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link href="https://www.gnu.org/software/gsl/manual/html_node/index.html#Top" rel="start" title="Top">
<link href="https://www.gnu.org/software/gsl/manual/html_node/Function-Index.html#Function-Index" rel="index" title="Function Index">
<link href="https://www.gnu.org/software/gsl/manual/html_node/Nonlinear-Least_002dSquares-Fitting.html#Nonlinear-Least_002dSquares-Fitting" rel="up" title="Nonlinear Least-Squares Fitting">
<link href="https://www.gnu.org/software/gsl/manual/html_node/References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting.html#References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting" rel="next" title="References and Further Reading for Nonlinear Least-Squares Fitting">
<link href="https://www.gnu.org/software/gsl/manual/html_node/Troubleshooting-Nonlinear-Least-Squares.html#Troubleshooting-Nonlinear-Least-Squares" rel="prev" title="Troubleshooting Nonlinear Least Squares">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


</head>

<body alink="#FF0000" bgcolor="#FFFFFF" lang="en" link="#0000FF" text="#000000" vlink="#800080">
<a name="Example-programs-for-Nonlinear-Least_002dSquares-Fitting"></a>
<div class="header">
<p>
Next: <a href="https://www.gnu.org/software/gsl/manual/html_node/References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting.html#References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting" accesskey="n" rel="next">References and Further Reading for Nonlinear Least-Squares Fitting</a>, Previous: <a href="https://www.gnu.org/software/gsl/manual/html_node/Troubleshooting-Nonlinear-Least-Squares.html#Troubleshooting-Nonlinear-Least-Squares" accesskey="p" rel="prev">Troubleshooting Nonlinear Least Squares</a>, Up: <a href="https://www.gnu.org/software/gsl/manual/html_node/Nonlinear-Least_002dSquares-Fitting.html#Nonlinear-Least_002dSquares-Fitting" accesskey="u" rel="up">Nonlinear Least-Squares Fitting</a> &nbsp; [<a href="https://www.gnu.org/software/gsl/manual/html_node/Function-Index.html#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<hr>
<a name="Examples-28"></a>
<h3 class="section">39.14 Examples</h3>

<p>The following example program fits a weighted exponential model with
background to experimental data, <em>Y = A \exp(-\lambda t) + b</em>. The
first part of the program sets up the functions <code>expb_f</code> and
<code>expb_df</code> to calculate the model and its Jacobian.  The appropriate
fitting function is given by,
</p>
<div class="example">
<pre class="example">f_i = (A \exp(-\lambda t_i) + b) - y_i
</pre></div>

<p>where we have chosen <em>t_i = i</em>.  The Jacobian matrix <em>J</em> is
the derivative of these functions with respect to the three parameters
(<em>A</em>, <em>\lambda</em>, <em>b</em>).  It is given by,
</p>
<div class="example">
<pre class="example">J_{ij} = d f_i / d x_j
</pre></div>

<p>where <em>x_0 = A</em>, <em>x_1 = \lambda</em> and <em>x_2 = b</em>. The
weights are given by <em>w_i = 1/\sigma_i^2</em>.
</p>
<div class="example">
<pre class="verbatim">/* expfit.c -- model functions for exponential + background */

struct data {
  size_t n;
  double * y;
};

int
expb_f (const gsl_vector * x, void *data, 
        gsl_vector * f)
{
  size_t n = ((struct data *)data)-&gt;n;
  double *y = ((struct data *)data)-&gt;y;

  double A = gsl_vector_get (x, 0);
  double lambda = gsl_vector_get (x, 1);
  double b = gsl_vector_get (x, 2);

  size_t i;

  for (i = 0; i &lt; n; i++)
    {
      /* Model Yi = A * exp(-lambda * i) + b */
      double t = i;
      double Yi = A * exp (-lambda * t) + b;
      gsl_vector_set (f, i, Yi - y[i]);
    }

  return GSL_SUCCESS;
}

int
expb_df (const gsl_vector * x, void *data, 
         gsl_matrix * J)
{
  size_t n = ((struct data *)data)-&gt;n;

  double A = gsl_vector_get (x, 0);
  double lambda = gsl_vector_get (x, 1);

  size_t i;

  for (i = 0; i &lt; n; i++)
    {
      /* Jacobian matrix J(i,j) = dfi / dxj, */
      /* where fi = (Yi - yi)/sigma[i],      */
      /*       Yi = A * exp(-lambda * i) + b  */
      /* and the xj are the parameters (A,lambda,b) */
      double t = i;
      double e = exp(-lambda * t);
      gsl_matrix_set (J, i, 0, e); 
      gsl_matrix_set (J, i, 1, -t * A * e);
      gsl_matrix_set (J, i, 2, 1.0);
    }
  return GSL_SUCCESS;
}
</pre></div>

<p>The main part of the program sets up a Levenberg-Marquardt solver and
some simulated random data. The data uses the known parameters
(5.0,0.1,1.0) combined with Gaussian noise (standard deviation = 0.1)
over a range of 40 timesteps. The initial guess for the parameters is
chosen as (0.0, 1.0, 0.0).
</p>
<div class="example">
<pre class="verbatim">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;
#include &lt;gsl/gsl_vector.h&gt;
#include &lt;gsl/gsl_blas.h&gt;
#include &lt;gsl/gsl_multifit_nlin.h&gt;

#include "expfit.c"

/* number of data points to fit */
#define N 40

int
main (void)
{
  const gsl_multifit_fdfsolver_type *T = gsl_multifit_fdfsolver_lmsder;
  gsl_multifit_fdfsolver *s;
  int status, info;
  size_t i;
  const size_t n = N;
  const size_t p = 3;

  gsl_matrix *J = gsl_matrix_alloc(n, p);
  gsl_matrix *covar = gsl_matrix_alloc (p, p);
  double y[N], weights[N];
  struct data d = { n, y };
  gsl_multifit_function_fdf f;
  double x_init[3] = { 1.0, 0.0, 0.0 };
  gsl_vector_view x = gsl_vector_view_array (x_init, p);
  gsl_vector_view w = gsl_vector_view_array(weights, n);
  const gsl_rng_type * type;
  gsl_rng * r;
  gsl_vector *res_f;
  double chi, chi0;

  const double xtol = 1e-8;
  const double gtol = 1e-8;
  const double ftol = 0.0;

  gsl_rng_env_setup();

  type = gsl_rng_default;
  r = gsl_rng_alloc (type);

  f.f = &amp;expb_f;
  f.df = &amp;expb_df;   /* set to NULL for finite-difference Jacobian */
  f.n = n;
  f.p = p;
  f.params = &amp;d;

  /* This is the data to be fitted */

  for (i = 0; i &lt; n; i++)
    {
      double t = i;
      double yi = 1.0 + 5 * exp (-0.1 * t);
      double si = 0.1 * yi;
      double dy = gsl_ran_gaussian(r, si);

      weights[i] = 1.0 / (si * si);
      y[i] = yi + dy;
      printf ("data: %zu %g %g\n", i, y[i], si);
    };

  s = gsl_multifit_fdfsolver_alloc (T, n, p);

  /* initialize solver with starting point and weights */
  gsl_multifit_fdfsolver_wset (s, &amp;f, &amp;x.vector, &amp;w.vector);

  /* compute initial residual norm */
  res_f = gsl_multifit_fdfsolver_residual(s);
  chi0 = gsl_blas_dnrm2(res_f);

  /* solve the system with a maximum of 20 iterations */
  status = gsl_multifit_fdfsolver_driver(s, 20, xtol, gtol, ftol, &amp;info);

  gsl_multifit_fdfsolver_jac(s, J);
  gsl_multifit_covar (J, 0.0, covar);

  /* compute final residual norm */
  chi = gsl_blas_dnrm2(res_f);

#define FIT(i) gsl_vector_get(s-&gt;x, i)
#define ERR(i) sqrt(gsl_matrix_get(covar,i,i))

  fprintf(stderr, "summary from method '%s'\n",
          gsl_multifit_fdfsolver_name(s));
  fprintf(stderr, "number of iterations: %zu\n",
          gsl_multifit_fdfsolver_niter(s));
  fprintf(stderr, "function evaluations: %zu\n", f.nevalf);
  fprintf(stderr, "Jacobian evaluations: %zu\n", f.nevaldf);
  fprintf(stderr, "reason for stopping: %s\n",
          (info == 1) ? "small step size" : "small gradient");
  fprintf(stderr, "initial |f(x)| = %g\n", chi0);
  fprintf(stderr, "final   |f(x)| = %g\n", chi);

  { 
    double dof = n - p;
    double c = GSL_MAX_DBL(1, chi / sqrt(dof)); 

    fprintf(stderr, "chisq/dof = %g\n",  pow(chi, 2.0) / dof);

    fprintf (stderr, "A      = %.5f +/- %.5f\n", FIT(0), c*ERR(0));
    fprintf (stderr, "lambda = %.5f +/- %.5f\n", FIT(1), c*ERR(1));
    fprintf (stderr, "b      = %.5f +/- %.5f\n", FIT(2), c*ERR(2));
  }

  fprintf (stderr, "status = %s\n", gsl_strerror (status));

  gsl_multifit_fdfsolver_free (s);
  gsl_matrix_free (covar);
  gsl_matrix_free (J);
  gsl_rng_free (r);
  return 0;
}
</pre></div>

<p>The iteration terminates when the relative change in x is smaller than
<em>10^{-8}</em>, or when the magnitude of the gradient falls below
<em>10^{-8}</em>.
Here are the results of running the program:
</p>
<div class="smallexample">
<pre class="smallexample">summary from method 'lmsder'
number of iterations: 8
function evaluations: 11
Jacobian evaluations: 9
reason for stopping: small step size
initial |f(x)| = 31.1919
final   |f(x)| = 5.45418
chisq/dof = 0.804002
A      = 5.17379 +/- 0.27938
lambda = 0.11104 +/- 0.00817
b      = 1.05283 +/- 0.05365
status = success
</pre></div>

<p>The approximate values of the parameters are found correctly, and the
chi-squared value indicates a good fit (the chi-squared per degree of
freedom is approximately 1).  In this case the errors on the parameters
can be estimated from the square roots of the diagonal elements of the
covariance matrix.  
</p>
<p>If the chi-squared value shows a poor fit (i.e. <em>chi^2/dof &gt;&gt; 1</em>) then the error estimates obtained from the
covariance matrix will be too small.  In the example program the error estimates
are multiplied by <em>\sqrt{\chi^2/dof}</em> in this case, a common way of increasing the
errors for a poor fit.  Note that a poor fit will result from the use
an inappropriate model, and the scaled error estimates may then
be outside the range of validity for Gaussian errors.
</p>

<hr>
<div class="header">
<p>
Next: <a href="https://www.gnu.org/software/gsl/manual/html_node/References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting.html#References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting" accesskey="n" rel="next">References and Further Reading for Nonlinear Least-Squares Fitting</a>, Previous: <a href="https://www.gnu.org/software/gsl/manual/html_node/Troubleshooting-Nonlinear-Least-Squares.html#Troubleshooting-Nonlinear-Least-Squares" accesskey="p" rel="prev">Troubleshooting Nonlinear Least Squares</a>, Up: <a href="https://www.gnu.org/software/gsl/manual/html_node/Nonlinear-Least_002dSquares-Fitting.html#Nonlinear-Least_002dSquares-Fitting" accesskey="u" rel="up">Nonlinear Least-Squares Fitting</a> &nbsp; [<a href="https://www.gnu.org/software/gsl/manual/html_node/Function-Index.html#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>





</body></html>