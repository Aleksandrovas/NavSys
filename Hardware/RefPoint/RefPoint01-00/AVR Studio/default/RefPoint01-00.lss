
RefPoint01-00.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000004e8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bc  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000061a  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000239  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000068c  00000000  00000000  00000e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000025d  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000030b  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	5d d1       	rcall	.+698    	; 0x2f6 <main>
  3c:	19 c2       	rjmp	.+1074   	; 0x470 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <Timer1_int>:
Timer1_int - restart Timer1
***************************************************************************/
void Timer1_int(void)
{
	/* Reset 16bit Timer1 for ToF measurments */
	TCCR1B=0;			// Stop Timer/Counter1
  40:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
  42:	eb e2       	ldi	r30, 0x2B	; 43
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	80 81       	ld	r24, Z
  48:	81 60       	ori	r24, 0x01	; 1
  4a:	80 83       	st	Z, r24
	TCNT1=0;			// Reset Timer/Counter1
  4c:	1d bc       	out	0x2d, r1	; 45
  4e:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
  50:	1f bc       	out	0x2f, r1	; 47
}
  52:	08 95       	ret

00000054 <PORTS_int>:
PORTS_int - PORTS initialise
***************************************************************************/
void PORTS_int(void)
{
	/* Configure PW0268 Pin */
	DDRA |= (1<<PA0);
  54:	aa e3       	ldi	r26, 0x3A	; 58
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	8c 91       	ld	r24, X
  5a:	81 60       	ori	r24, 0x01	; 1
  5c:	8c 93       	st	X, r24

	/* Configure RF module pins */
	DDRA |= (1<<PA3) | (1<<PA4) | (1<<PA6);
  5e:	8c 91       	ld	r24, X
  60:	88 65       	ori	r24, 0x58	; 88
  62:	8c 93       	st	X, r24
	PORTA |= (1<<SDO);
  64:	eb e3       	ldi	r30, 0x3B	; 59
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	80 62       	ori	r24, 0x20	; 32
  6c:	80 83       	st	Z, r24

	/* Configure LEDS Pins */
	DDRA |= (1<<PA1) | (1<<PA2);
  6e:	8c 91       	ld	r24, X
  70:	86 60       	ori	r24, 0x06	; 6
  72:	8c 93       	st	X, r24

	PW0268_OFF;
  74:	80 81       	ld	r24, Z
  76:	8e 7f       	andi	r24, 0xFE	; 254
  78:	80 83       	st	Z, r24
	LED1_OFF;
  7a:	80 81       	ld	r24, Z
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	80 83       	st	Z, r24
	LED2_OFF;
  80:	80 81       	ld	r24, Z
  82:	84 60       	ori	r24, 0x04	; 4
  84:	80 83       	st	Z, r24
}
  86:	08 95       	ret

00000088 <WriteCMD>:

/***************************************************************************
WriteCMD - Write command
***************************************************************************/
void WriteCMD(unsigned int CMD)
{
  88:	9c 01       	movw	r18, r24
	uint8_t n = 16;

	SCK_LOW;
  8a:	eb e3       	ldi	r30, 0x3B	; 59
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	80 83       	st	Z, r24
	nSEL_LOW;
  94:	80 81       	ld	r24, Z
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	80 83       	st	Z, r24
  9a:	9f e0       	ldi	r25, 0x0F	; 15
	
	while(n--)
		{
		SCK_LOW;
  9c:	80 81       	ld	r24, Z
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	80 83       	st	Z, r24

		if(CMD&0x8000)
  a2:	33 23       	and	r19, r19
  a4:	24 f4       	brge	.+8      	; 0xae <WriteCMD+0x26>
			SDI_HI;
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <WriteCMD+0x2c>
		else
			SDI_LOW;
  ae:	80 81       	ld	r24, Z
  b0:	8f 7b       	andi	r24, 0xBF	; 191
  b2:	80 83       	st	Z, r24

		SCK_HI;	
  b4:	80 81       	ld	r24, Z
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	80 83       	st	Z, r24
	uint8_t n = 16;

	SCK_LOW;
	nSEL_LOW;
	
	while(n--)
  ba:	99 23       	and	r25, r25
  bc:	21 f0       	breq	.+8      	; 0xc6 <WriteCMD+0x3e>
		else
			SDI_LOW;

		SCK_HI;	
			
		CMD=CMD<<1;
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
	uint8_t n = 16;

	SCK_LOW;
	nSEL_LOW;
	
	while(n--)
  c2:	91 50       	subi	r25, 0x01	; 1
  c4:	eb cf       	rjmp	.-42     	; 0x9c <WriteCMD+0x14>
		SCK_HI;	
			
		CMD=CMD<<1;
		}

	SCK_LOW;
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	80 83       	st	Z, r24
	nSEL_HI;
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
}
  d6:	08 95       	ret

000000d8 <RFM12_init>:
void RFM12_init(void)
{
	uint16_t Fcarr;

	/* Low Battery Detector and Microcontroller Clock Divider Command: 10MHz output*/
	WriteCMD(0xC000 | (CLK10MHz<<5));
  d8:	80 ee       	ldi	r24, 0xE0	; 224
  da:	90 ec       	ldi	r25, 0xC0	; 192
  dc:	d5 df       	rcall	.-86     	; 0x88 <WriteCMD>
	asm("nop");
  de:	00 00       	nop
	asm("nop");
  e0:	00 00       	nop
	asm("nop");
  e2:	00 00       	nop

	/* Configuration Setting Command  */
	WriteCMD(0x80DF);	// 433MHz Band; Enable TX registere; Enable RX FIFO buffer, 16pF
  e4:	8f ed       	ldi	r24, 0xDF	; 223
  e6:	90 e8       	ldi	r25, 0x80	; 128
  e8:	cf df       	rcall	.-98     	; 0x88 <WriteCMD>
	
	/* Frequency Setting Command: Fcarrier = 439.00MHz */
	Fcarr = Fc(439.00);
	WriteCMD(0xA000|Fcarr);
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	9e ea       	ldi	r25, 0xAE	; 174
  ee:	cc df       	rcall	.-104    	; 0x88 <WriteCMD>

	/* Data Rate Command: 114.943kbps */
	WriteCMD(0xC600|BR114_943kbs);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	96 ec       	ldi	r25, 0xC6	; 198
  f4:	c9 df       	rcall	.-110    	; 0x88 <WriteCMD>

	/* Receiver Control Command */
	WriteCMD(0x9420);	// VDI, FAST, Bandwidth 400kHz, LNA gain 0dBm, -103dBm
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	94 e9       	ldi	r25, 0x94	; 148
  fa:	c6 df       	rcall	.-116    	; 0x88 <WriteCMD>

	/* Data Filter Command */
	WriteCMD(0xC2AC);	// Auto-lock; Digital filter;
  fc:	8c ea       	ldi	r24, 0xAC	; 172
  fe:	92 ec       	ldi	r25, 0xC2	; 194
 100:	c3 df       	rcall	.-122    	; 0x88 <WriteCMD>
	
	/* FIFO and Reset Mode Command */
	WriteCMD(0xCAF3);	// FIFO interrupt level: 16bits; FIFO fill start condition: Sync-word; Enable FIFO fill; dr - set to "1"
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	9a ec       	ldi	r25, 0xCA	; 202
 106:	c0 df       	rcall	.-128    	; 0x88 <WriteCMD>
	
	/* AFC Command */
	WriteCMD(0xC49B);	// AFC setting: Keep offset when VDI hi; select range limit +15/-16; Enable AFC funcition; st,oe - set to "1"
 108:	8b e9       	ldi	r24, 0x9B	; 155
 10a:	94 ec       	ldi	r25, 0xC4	; 196
 10c:	bd df       	rcall	.-134    	; 0x88 <WriteCMD>
	
	/* TX Configuration Control Command */
	WriteCMD(0x98D0);	// 210kHz deviation; MAX OUT
 10e:	80 ed       	ldi	r24, 0xD0	; 208
 110:	98 e9       	ldi	r25, 0x98	; 152
 112:	ba df       	rcall	.-140    	; 0x88 <WriteCMD>

	/* Power Management Command */
	RF_Iddle;
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	92 e8       	ldi	r25, 0x82	; 130
 118:	b7 df       	rcall	.-146    	; 0x88 <WriteCMD>
}
 11a:	08 95       	ret

0000011c <Write_FSK_byte>:

/***************************************************************************
Write_FSK_byte - Write FSK 8bit data
***************************************************************************/
void Write_FSK_byte(uint8_t data)
{
 11c:	98 2f       	mov	r25, r24
	uint16_t CMD = 0xB800;
	uint8_t RGIT = 0;
	
	/* Wait for previous data lacth */
	do{
		SCK_LOW;
 11e:	eb e3       	ldi	r30, 0x3B	; 59
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7e       	andi	r24, 0xEF	; 239
 126:	80 83       	st	Z, r24
		nSEL_LOW;
 128:	80 81       	ld	r24, Z
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	80 83       	st	Z, r24
		SDI_LOW;
 12e:	80 81       	ld	r24, Z
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	80 83       	st	Z, r24
		SCK_HI;
 134:	80 81       	ld	r24, Z
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24
		
		if(SDO_PIN)
 13a:	cd 99       	sbic	0x19, 5	; 25
 13c:	1a c0       	rjmp	.+52     	; 0x172 <Write_FSK_byte+0x56>
 13e:	a9 e3       	ldi	r26, 0x39	; 57
 140:	b0 e0       	ldi	r27, 0x00	; 0
			RGIT=1;		

		SCK_LOW;
 142:	80 81       	ld	r24, Z
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	80 83       	st	Z, r24
		SDI_HI;
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
		nSEL_HI;
 14e:	80 81       	ld	r24, Z
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 83       	st	Z, r24
	uint16_t CMD = 0xB800;
	uint8_t RGIT = 0;
	
	/* Wait for previous data lacth */
	do{
		SCK_LOW;
 154:	80 81       	ld	r24, Z
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	80 83       	st	Z, r24
		nSEL_LOW;
 15a:	80 81       	ld	r24, Z
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	80 83       	st	Z, r24
		SDI_LOW;
 160:	80 81       	ld	r24, Z
 162:	8f 7b       	andi	r24, 0xBF	; 191
 164:	80 83       	st	Z, r24
		SCK_HI;
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
		
		if(SDO_PIN)
 16c:	8c 91       	ld	r24, X
 16e:	85 ff       	sbrs	r24, 5
 170:	e8 cf       	rjmp	.-48     	; 0x142 <Write_FSK_byte+0x26>
			RGIT=1;		

		SCK_LOW;
 172:	eb e3       	ldi	r30, 0x3B	; 59
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 7e       	andi	r24, 0xEF	; 239
 17a:	80 83       	st	Z, r24
		SDI_HI;
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
		nSEL_HI;
 182:	80 81       	ld	r24, Z
 184:	88 60       	ori	r24, 0x08	; 8
 186:	80 83       	st	Z, r24
		}while(!RGIT);

	/* Transmitter Register Write Command */
	WriteCMD(CMD|data);
 188:	89 2f       	mov	r24, r25
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	98 6b       	ori	r25, 0xB8	; 184
 18e:	7c df       	rcall	.-264    	; 0x88 <WriteCMD>
}
 190:	08 95       	ret

00000192 <RMFM12_send>:

/***************************************************************************
RMFM12_send - Send FSK data 
***************************************************************************/
void RMFM12_send(uint16_t data)
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	08 2f       	mov	r16, r24
 198:	19 2f       	mov	r17, r25
	/* RF packet [0xAA 0xAA 0xAA 0x2D 0xD4 Data_MSB Data_LSB] */
	Write_FSK_byte(0xAA);		// Send Preamble
 19a:	8a ea       	ldi	r24, 0xAA	; 170
 19c:	bf df       	rcall	.-130    	; 0x11c <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 19e:	8a ea       	ldi	r24, 0xAA	; 170
 1a0:	bd df       	rcall	.-134    	; 0x11c <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 1a2:	8a ea       	ldi	r24, 0xAA	; 170
 1a4:	bb df       	rcall	.-138    	; 0x11c <Write_FSK_byte>
	Write_FSK_byte(0x2D);		// Send sync word
 1a6:	8d e2       	ldi	r24, 0x2D	; 45
 1a8:	b9 df       	rcall	.-142    	; 0x11c <Write_FSK_byte>
	Write_FSK_byte(0xD4);		// Send sync word
 1aa:	84 ed       	ldi	r24, 0xD4	; 212
 1ac:	b7 df       	rcall	.-146    	; 0x11c <Write_FSK_byte>
	Write_FSK_byte(data>>8);	// Send Data
 1ae:	81 2f       	mov	r24, r17
 1b0:	b5 df       	rcall	.-150    	; 0x11c <Write_FSK_byte>
	Write_FSK_byte(data&0xFF);	// Send Data
 1b2:	80 2f       	mov	r24, r16
 1b4:	b3 df       	rcall	.-154    	; 0x11c <Write_FSK_byte>
}
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <RFTransmit_packet>:

/***************************************************************************
RFTransmit_packet - Transmit data to RF
***************************************************************************/
void RFTransmit_packet(uint8_t RefNr, uint16_t Value)
{
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	7b 01       	movw	r14, r22
	/* Prepare 16bit packet */
	packet|=(RefNr&0x07)<<13;	// RefNr 3 bits
	packet|=(Value&0x1FFF);		// Value 13 bits
	
	/* Send 16bit packet */
	RF_TXmode;
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	92 e8       	ldi	r25, 0x82	; 130
 1ca:	5e df       	rcall	.-324    	; 0x88 <WriteCMD>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	0a ef       	ldi	r16, 0xFA	; 250
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	c8 01       	movw	r24, r16
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <RFTransmit_packet+0x16>
	_delay_us(100);
	//RMFM12_send(packet);
	RMFM12_send(Value);
 1d6:	c7 01       	movw	r24, r14
 1d8:	dc df       	rcall	.-72     	; 0x192 <RMFM12_send>
 1da:	c8 01       	movw	r24, r16
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <RFTransmit_packet+0x20>
	_delay_us(100);
	//_delay_ms(2);
	RF_Iddle;
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	92 e8       	ldi	r25, 0x82	; 130
 1e4:	51 df       	rcall	.-350    	; 0x88 <WriteCMD>
}
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <RMFM12_readFIFO>:

/***************************************************************************
RMFM12_readFIFO - Read FIFO
***************************************************************************/
uint16_t RMFM12_readFIFO(void)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
	uint16_t Result=0;

	SCK_LOW;
 1f4:	eb e3       	ldi	r30, 0x3B	; 59
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7e       	andi	r24, 0xEF	; 239
 1fc:	80 83       	st	Z, r24
	SDI_LOW;
 1fe:	80 81       	ld	r24, Z
 200:	8f 7b       	andi	r24, 0xBF	; 191
 202:	80 83       	st	Z, r24
	nSEL_LOW;
 204:	80 81       	ld	r24, Z
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	80 83       	st	Z, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
		{ 
		SCK_HI;
 20c:	80 81       	ld	r24, Z
 20e:	80 61       	ori	r24, 0x10	; 16
 210:	80 83       	st	Z, r24
		SCK_LOW;
 212:	80 81       	ld	r24, Z
 214:	8f 7e       	andi	r24, 0xEF	; 239
 216:	80 83       	st	Z, r24
	SCK_LOW;
	SDI_LOW;
	nSEL_LOW;

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
 218:	9f 5f       	subi	r25, 0xFF	; 255
 21a:	90 31       	cpi	r25, 0x10	; 16
 21c:	b9 f7       	brne	.-18     	; 0x20c <RMFM12_readFIFO+0x1c>
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
		{ 
		Result = Result<<1;
		
		if(SDO_PIN)
 224:	a9 e3       	ldi	r26, 0x39	; 57
 226:	b0 e0       	ldi	r27, 0x00	; 0
			Result|=1;

		SCK_HI;
 228:	eb e3       	ldi	r30, 0x3B	; 59
 22a:	f0 e0       	ldi	r31, 0x00	; 0
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
		{ 
		Result = Result<<1;
 22c:	cc 0f       	add	r28, r28
 22e:	dd 1f       	adc	r29, r29
		
		if(SDO_PIN)
 230:	8c 91       	ld	r24, X
 232:	85 fd       	sbrc	r24, 5
			Result|=1;
 234:	c1 60       	ori	r28, 0x01	; 1

		SCK_HI;
 236:	80 81       	ld	r24, Z
 238:	80 61       	ori	r24, 0x10	; 16
 23a:	80 83       	st	Z, r24
		SCK_LOW;
 23c:	80 81       	ld	r24, Z
 23e:	8f 7e       	andi	r24, 0xEF	; 239
 240:	80 83       	st	Z, r24
		SCK_HI;
		SCK_LOW;
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
 242:	9f 5f       	subi	r25, 0xFF	; 255
 244:	90 31       	cpi	r25, 0x10	; 16
 246:	91 f7       	brne	.-28     	; 0x22c <RMFM12_readFIFO+0x3c>

		SCK_HI;
		SCK_LOW;
		}

	nSEL_HI;
 248:	eb e3       	ldi	r30, 0x3B	; 59
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	80 83       	st	Z, r24
	
	WriteCMD(0xCA80);	// reset FIFO
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	9a ec       	ldi	r25, 0xCA	; 202
 256:	18 df       	rcall	.-464    	; 0x88 <WriteCMD>
	WriteCMD(0xCAF3);
 258:	83 ef       	ldi	r24, 0xF3	; 243
 25a:	9a ec       	ldi	r25, 0xCA	; 202
 25c:	15 df       	rcall	.-470    	; 0x88 <WriteCMD>

	return(Result);
}
 25e:	8c 2f       	mov	r24, r28
 260:	9d 2f       	mov	r25, r29
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <BlinkNumber>:

/***************************************************************************
BlinkNumber - 
***************************************************************************/
void BlinkNumber(uint8_t RefNr)
{
 268:	78 2f       	mov	r23, r24
	LED2_ON;
 26a:	eb e3       	ldi	r30, 0x3B	; 59
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8b 7f       	andi	r24, 0xFB	; 251
 272:	80 83       	st	Z, r24
	LED1_OFF;
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
 27a:	28 e8       	ldi	r18, 0x88	; 136
 27c:	33 e1       	ldi	r19, 0x13	; 19
 27e:	4a ef       	ldi	r20, 0xFA	; 250
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	ca 01       	movw	r24, r20
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <BlinkNumber+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28c:	d1 f7       	brne	.-12     	; 0x282 <BlinkNumber+0x1a>
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
 28e:	77 23       	and	r23, r23
 290:	f9 f0       	breq	.+62     	; 0x2d0 <BlinkNumber+0x68>
 292:	60 e0       	ldi	r22, 0x00	; 0
	{
		LED1_ON;
 294:	eb e3       	ldi	r30, 0x3B	; 59
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	a4 ec       	ldi	r26, 0xC4	; 196
 29a:	b9 e0       	ldi	r27, 0x09	; 9
 29c:	4a ef       	ldi	r20, 0xFA	; 250
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	80 83       	st	Z, r24
 2a6:	9d 01       	movw	r18, r26
 2a8:	ca 01       	movw	r24, r20
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <BlinkNumber+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b2:	d1 f7       	brne	.-12     	; 0x2a8 <BlinkNumber+0x40>
		_delay_ms(250);
		LED1_OFF;
 2b4:	80 81       	ld	r24, Z
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	80 83       	st	Z, r24
 2ba:	9d 01       	movw	r18, r26
 2bc:	ca 01       	movw	r24, r20
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <BlinkNumber+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c6:	d1 f7       	brne	.-12     	; 0x2bc <BlinkNumber+0x54>
{
	LED2_ON;
	LED1_OFF;
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	67 17       	cp	r22, r23
 2cc:	48 f3       	brcs	.-46     	; 0x2a0 <BlinkNumber+0x38>
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <BlinkNumber+0x7c>
 2d0:	20 e1       	ldi	r18, 0x10	; 16
 2d2:	37 e2       	ldi	r19, 0x27	; 39
 2d4:	4a ef       	ldi	r20, 0xFA	; 250
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	ca 01       	movw	r24, r20
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <BlinkNumber+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e2:	d1 f7       	brne	.-12     	; 0x2d8 <BlinkNumber+0x70>
		_delay_ms(250);
	}
	if (RefNr==0)
		_delay_ms(1000);
	
	LED1_OFF;
 2e4:	eb e3       	ldi	r30, 0x3B	; 59
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	80 83       	st	Z, r24
	LED2_OFF;
 2ee:	80 81       	ld	r24, Z
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	80 83       	st	Z, r24
}
 2f4:	08 95       	ret

000002f6 <main>:
***************************************************************************/
volatile uint16_t laikas;


int main(void)
{
 2f6:	2f 92       	push	r2
 2f8:	3f 92       	push	r3
 2fa:	4f 92       	push	r4
 2fc:	5f 92       	push	r5
 2fe:	6f 92       	push	r6
 300:	7f 92       	push	r7
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	97 e2       	ldi	r25, 0x27	; 39
 31c:	2a ef       	ldi	r18, 0xFA	; 250
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	f9 01       	movw	r30, r18
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 328:	d9 f7       	brne	.-10     	; 0x320 <main+0x2a>
	uint8_t TimeOutFlag;

	/* Wait for Vcc stabilize */
	_delay_ms(1000);

	PORTS_int();
 32a:	94 de       	rcall	.-728    	; 0x54 <PORTS_int>
	RFM12_init();
 32c:	d5 de       	rcall	.-598    	; 0xd8 <RFM12_init>
	Timer1_int();
 32e:	88 de       	rcall	.-752    	; 0x40 <Timer1_int>
	BlinkNumber(RefPointNr);
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	9a df       	rcall	.-204    	; 0x268 <BlinkNumber>

	RF_FIFORecog;
 334:	80 ef       	ldi	r24, 0xF0	; 240
 336:	9a ec       	ldi	r25, 0xCA	; 202
 338:	a7 de       	rcall	.-690    	; 0x88 <WriteCMD>
 33a:	83 ef       	ldi	r24, 0xF3	; 243
 33c:	9a ec       	ldi	r25, 0xCA	; 202
 33e:	a4 de       	rcall	.-696    	; 0x88 <WriteCMD>
	RF_RXmode;
 340:	88 ed       	ldi	r24, 0xD8	; 216
 342:	92 e8       	ldi	r25, 0x82	; 130
 344:	a1 de       	rcall	.-702    	; 0x88 <WriteCMD>

	while(1)
	{
		/* Wait for interupt from RFM12 (received Data) */
		if(!nIRQ_PIN)	
 346:	09 e3       	ldi	r16, 0x39	; 57
 348:	10 e0       	ldi	r17, 0x00	; 0
		{
			/* Start 16bit Timer1 immediately for ToF measurments */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 34a:	0f 2e       	mov	r0, r31
 34c:	fe e4       	ldi	r31, 0x4E	; 78
 34e:	af 2e       	mov	r10, r31
 350:	bb 24       	eor	r11, r11
 352:	f0 2d       	mov	r31, r0
 354:	99 24       	eor	r9, r9
 356:	68 94       	set
 358:	91 f8       	bld	r9, 1

			/* Check received data */
			if(RMFM12_readFIFO() == RF_StartCode)
			{
				/* Turn ON PW0268 */
				PW0268_ON;
 35a:	cb e3       	ldi	r28, 0x3B	; 59
 35c:	d0 e0       	ldi	r29, 0x00	; 0

				/* RF Trasmiter/Receiver modes OFF to save power */
				RF_Iddle;

	    		/* Send start signal to front-end (PW0268) */	   	   		    
			    DDRA |= (1<<PA0);	// Configure PA0 as Output
 35e:	0f 2e       	mov	r0, r31
 360:	fa e3       	ldi	r31, 0x3A	; 58
 362:	cf 2e       	mov	r12, r31
 364:	dd 24       	eor	r13, r13
 366:	f0 2d       	mov	r31, r0
 368:	0f 2e       	mov	r0, r31
 36a:	fa ef       	ldi	r31, 0xFA	; 250
 36c:	6f 2e       	mov	r6, r31
 36e:	77 24       	eor	r7, r7
 370:	f0 2d       	mov	r31, r0

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
				{
					if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
 372:	0f 2e       	mov	r0, r31
 374:	fb e2       	ldi	r31, 0x2B	; 43
 376:	ef 2e       	mov	r14, r31
 378:	ff 24       	eor	r15, r15
 37a:	f0 2d       	mov	r31, r0
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 37c:	0f 2e       	mov	r0, r31
 37e:	fc e4       	ldi	r31, 0x4C	; 76
 380:	4f 2e       	mov	r4, r31
 382:	55 24       	eor	r5, r5
 384:	f0 2d       	mov	r31, r0
 386:	0f 2e       	mov	r0, r31
 388:	f8 eb       	ldi	r31, 0xB8	; 184
 38a:	2f 2e       	mov	r2, r31
 38c:	f8 e8       	ldi	r31, 0x88	; 136
 38e:	3f 2e       	mov	r3, r31
 390:	f0 2d       	mov	r31, r0
	RF_RXmode;

	while(1)
	{
		/* Wait for interupt from RFM12 (received Data) */
		if(!nIRQ_PIN)	
 392:	f8 01       	movw	r30, r16
 394:	80 81       	ld	r24, Z
 396:	88 23       	and	r24, r24
 398:	e4 f3       	brlt	.-8      	; 0x392 <main+0x9c>
		{
			/* Start 16bit Timer1 immediately for ToF measurments */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 39a:	f5 01       	movw	r30, r10
 39c:	90 82       	st	Z, r9

			/* Check received data */
			if(RMFM12_readFIFO() == RF_StartCode)
 39e:	28 df       	rcall	.-432    	; 0x1f0 <RMFM12_readFIFO>
 3a0:	84 55       	subi	r24, 0x54	; 84
 3a2:	94 41       	sbci	r25, 0x14	; 20
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <main+0xb2>
 3a6:	45 c0       	rjmp	.+138    	; 0x432 <main+0x13c>
			{
				/* Turn ON PW0268 */
				PW0268_ON;
 3a8:	88 81       	ld	r24, Y
 3aa:	81 60       	ori	r24, 0x01	; 1
 3ac:	88 83       	st	Y, r24

				/* RF Trasmiter/Receiver modes OFF to save power */
				RF_Iddle;
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	92 e8       	ldi	r25, 0x82	; 130
 3b2:	6a de       	rcall	.-812    	; 0x88 <WriteCMD>

	    		/* Send start signal to front-end (PW0268) */	   	   		    
			    DDRA |= (1<<PA0);	// Configure PA0 as Output
 3b4:	f6 01       	movw	r30, r12
 3b6:	80 81       	ld	r24, Z
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	80 83       	st	Z, r24
				PORTA &= ~(1<<PA0);	// Clear PA0
 3bc:	88 81       	ld	r24, Y
 3be:	8e 7f       	andi	r24, 0xFE	; 254
 3c0:	88 83       	st	Y, r24
 3c2:	c3 01       	movw	r24, r6
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0xce>
				_delay_us(100);	
				PORTA |= (1<<PA0);	// Set PA0
 3c8:	88 81       	ld	r24, Y
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	88 83       	st	Y, r24
				DDRA &= ~(1<<PA0);	// Configure PA0 as Input
 3ce:	80 81       	ld	r24, Z
 3d0:	8e 7f       	andi	r24, 0xFE	; 254
 3d2:	80 83       	st	Z, r24
			
				LED1_ON;			// RF received
 3d4:	88 81       	ld	r24, Y
 3d6:	8d 7f       	andi	r24, 0xFD	; 253
 3d8:	88 83       	st	Y, r24
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <main+0xee>

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
				{
					if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
 3dc:	f7 01       	movw	r30, r14
 3de:	80 81       	ld	r24, Z
 3e0:	80 fd       	sbrc	r24, 0
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <main+0xf8>
			
				LED1_ON;			// RF received

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 81       	ld	r24, Z
 3e8:	80 fd       	sbrc	r24, 0
 3ea:	f8 cf       	rjmp	.-16     	; 0x3dc <main+0xe6>
 3ec:	2d c0       	rjmp	.+90     	; 0x448 <main+0x152>
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 3ee:	f2 01       	movw	r30, r4
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	90 93 61 00 	sts	0x0061, r25
 404:	80 93 60 00 	sts	0x0060, r24
								
				/* Turn OFF PW0268 */
				PW0268_OFF;
 408:	88 81       	ld	r24, Y
 40a:	8e 7f       	andi	r24, 0xFE	; 254
 40c:	88 83       	st	Y, r24
 40e:	0b c0       	rjmp	.+22     	; 0x426 <main+0x130>
				if (!TimeOutFlag)
				{
					LED2_ON;		// UG signal received
					
					/* Wait for Timer1 Overflow Flag to ensure all RefPoints allready received UG signal */
					while( !(TIFR1&(1<<TOV1)) );
 410:	f7 01       	movw	r30, r14
 412:	80 81       	ld	r24, Z
 414:	80 ff       	sbrs	r24, 0
 416:	fc cf       	rjmp	.-8      	; 0x410 <main+0x11a>
 418:	c1 01       	movw	r24, r2
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <main+0x124>

					/* Send ToF to Host */
					_delay_ms(RFTransmit_ms*RefPointNr);
					//RFTransmit_packet(RefPointNr,laikas);
					RFTransmit_packet(RefPointNr,0x1234);
 41e:	87 e0       	ldi	r24, 0x07	; 7
 420:	64 e3       	ldi	r22, 0x34	; 52
 422:	72 e1       	ldi	r23, 0x12	; 18
 424:	cb de       	rcall	.-618    	; 0x1bc <RFTransmit_packet>
				}
	  			LED1_OFF;
 426:	88 81       	ld	r24, Y
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	88 83       	st	Y, r24
	 			LED2_OFF;
 42c:	88 81       	ld	r24, Y
 42e:	84 60       	ori	r24, 0x04	; 4
 430:	88 83       	st	Y, r24
			}

		/* Restart Timer1 Configuration */
		Timer1_int();
 432:	06 de       	rcall	.-1012   	; 0x40 <Timer1_int>

		/* Restart the synchron pattern recognition */
		RF_FIFORecog;
 434:	80 ef       	ldi	r24, 0xF0	; 240
 436:	9a ec       	ldi	r25, 0xCA	; 202
 438:	27 de       	rcall	.-946    	; 0x88 <WriteCMD>
 43a:	83 ef       	ldi	r24, 0xF3	; 243
 43c:	9a ec       	ldi	r25, 0xCA	; 202
 43e:	24 de       	rcall	.-952    	; 0x88 <WriteCMD>
		RF_RXmode;		
 440:	88 ed       	ldi	r24, 0xD8	; 216
 442:	92 e8       	ldi	r25, 0x82	; 130
 444:	21 de       	rcall	.-958    	; 0x88 <WriteCMD>
 446:	a5 cf       	rjmp	.-182    	; 0x392 <main+0x9c>
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 448:	f2 01       	movw	r30, r4
 44a:	80 81       	ld	r24, Z
 44c:	91 81       	ldd	r25, Z+1	; 0x01
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	90 93 61 00 	sts	0x0061, r25
 45e:	80 93 60 00 	sts	0x0060, r24
								
				/* Turn OFF PW0268 */
				PW0268_OFF;
 462:	88 81       	ld	r24, Y
 464:	8e 7f       	andi	r24, 0xFE	; 254
 466:	88 83       	st	Y, r24

				/* Check TimeOutFlag */
				if (!TimeOutFlag)
				{
					LED2_ON;		// UG signal received
 468:	88 81       	ld	r24, Y
 46a:	8b 7f       	andi	r24, 0xFB	; 251
 46c:	88 83       	st	Y, r24
 46e:	d0 cf       	rjmp	.-96     	; 0x410 <main+0x11a>

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
