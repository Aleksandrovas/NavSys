
RefPoint01-00.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000004e0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bc  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000555  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000223  00000000  00000000  00000b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000636  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019e  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fe  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	62 d1       	rcall	.+708    	; 0x300 <main>
  3c:	15 c2       	rjmp	.+1066   	; 0x468 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <Timer1_int>:
Timer1_int - restart Timer1
***************************************************************************/
void Timer1_int(void)
{
	/* Reset 16bit Timer1 for ToF measurments */
	TCCR1B=0;			// Stop Timer/Counter1
  40:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
  42:	eb e2       	ldi	r30, 0x2B	; 43
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	80 81       	ld	r24, Z
  48:	81 60       	ori	r24, 0x01	; 1
  4a:	80 83       	st	Z, r24
	TCNT1=0;			// Reset Timer/Counter1
  4c:	1d bc       	out	0x2d, r1	; 45
  4e:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
  50:	1f bc       	out	0x2f, r1	; 47
}
  52:	08 95       	ret

00000054 <PORTS_int>:
/***************************************************************************
PORTS_int - PORTS initialise
***************************************************************************/
void PORTS_int(void)
{
	DDRA |= (1<<PA1) | (1<<PA2) | (1<<PA3) | (1<<PA4) | (1<<PA6);
  54:	ea e3       	ldi	r30, 0x3A	; 58
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	8e 65       	ori	r24, 0x5E	; 94
  5c:	80 83       	st	Z, r24
	PORTA |= (1<<SDO);
  5e:	eb e3       	ldi	r30, 0x3B	; 59
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	80 62       	ori	r24, 0x20	; 32
  66:	80 83       	st	Z, r24
	LED1_OFF;
  68:	80 81       	ld	r24, Z
  6a:	82 60       	ori	r24, 0x02	; 2
  6c:	80 83       	st	Z, r24
	LED2_OFF;
  6e:	80 81       	ld	r24, Z
  70:	84 60       	ori	r24, 0x04	; 4
  72:	80 83       	st	Z, r24
}
  74:	08 95       	ret

00000076 <WriteCMD>:

/***************************************************************************
WriteCMD - Write command
***************************************************************************/
void WriteCMD(unsigned int CMD)
{
  76:	9c 01       	movw	r18, r24
	uint8_t n = 16;

	SCK_LOW;
  78:	eb e3       	ldi	r30, 0x3B	; 59
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8f 7e       	andi	r24, 0xEF	; 239
  80:	80 83       	st	Z, r24
	nSEL_LOW;
  82:	80 81       	ld	r24, Z
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	80 83       	st	Z, r24
  88:	9f e0       	ldi	r25, 0x0F	; 15
	
	while(n--)
		{
		SCK_LOW;
  8a:	80 81       	ld	r24, Z
  8c:	8f 7e       	andi	r24, 0xEF	; 239
  8e:	80 83       	st	Z, r24

		if(CMD&0x8000)
  90:	33 23       	and	r19, r19
  92:	24 f4       	brge	.+8      	; 0x9c <WriteCMD+0x26>
			SDI_HI;
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <WriteCMD+0x2c>
		else
			SDI_LOW;
  9c:	80 81       	ld	r24, Z
  9e:	8f 7b       	andi	r24, 0xBF	; 191
  a0:	80 83       	st	Z, r24

		SCK_HI;	
  a2:	80 81       	ld	r24, Z
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	80 83       	st	Z, r24
	uint8_t n = 16;

	SCK_LOW;
	nSEL_LOW;
	
	while(n--)
  a8:	99 23       	and	r25, r25
  aa:	21 f0       	breq	.+8      	; 0xb4 <WriteCMD+0x3e>
		else
			SDI_LOW;

		SCK_HI;	
			
		CMD=CMD<<1;
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
	uint8_t n = 16;

	SCK_LOW;
	nSEL_LOW;
	
	while(n--)
  b0:	91 50       	subi	r25, 0x01	; 1
  b2:	eb cf       	rjmp	.-42     	; 0x8a <WriteCMD+0x14>
		SCK_HI;	
			
		CMD=CMD<<1;
		}

	SCK_LOW;
  b4:	eb e3       	ldi	r30, 0x3B	; 59
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8f 7e       	andi	r24, 0xEF	; 239
  bc:	80 83       	st	Z, r24
	nSEL_HI;
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
}
  c4:	08 95       	ret

000000c6 <Write_FSK_byte>:

/***************************************************************************
Write_FSK_byte - Write FSK 8bit data
***************************************************************************/
void Write_FSK_byte(uint8_t data)
{
  c6:	98 2f       	mov	r25, r24
	uint16_t CMD = 0xB800;
	uint8_t RGIT = 0;
	
	/* Wait for previous data lacth */
	do{
		SCK_LOW;
  c8:	eb e3       	ldi	r30, 0x3B	; 59
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	80 83       	st	Z, r24
		nSEL_LOW;
  d2:	80 81       	ld	r24, Z
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	80 83       	st	Z, r24
		SDI_LOW;
  d8:	80 81       	ld	r24, Z
  da:	8f 7b       	andi	r24, 0xBF	; 191
  dc:	80 83       	st	Z, r24
		SCK_HI;
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	80 83       	st	Z, r24
		
		if(SDO_PIN)
  e4:	cd 99       	sbic	0x19, 5	; 25
  e6:	1a c0       	rjmp	.+52     	; 0x11c <__stack+0x3d>
  e8:	a9 e3       	ldi	r26, 0x39	; 57
  ea:	b0 e0       	ldi	r27, 0x00	; 0
			RGIT=1;		

		SCK_LOW;
  ec:	80 81       	ld	r24, Z
  ee:	8f 7e       	andi	r24, 0xEF	; 239
  f0:	80 83       	st	Z, r24
		SDI_HI;
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
		nSEL_HI;
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
	uint16_t CMD = 0xB800;
	uint8_t RGIT = 0;
	
	/* Wait for previous data lacth */
	do{
		SCK_LOW;
  fe:	80 81       	ld	r24, Z
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	80 83       	st	Z, r24
		nSEL_LOW;
 104:	80 81       	ld	r24, Z
 106:	87 7f       	andi	r24, 0xF7	; 247
 108:	80 83       	st	Z, r24
		SDI_LOW;
 10a:	80 81       	ld	r24, Z
 10c:	8f 7b       	andi	r24, 0xBF	; 191
 10e:	80 83       	st	Z, r24
		SCK_HI;
 110:	80 81       	ld	r24, Z
 112:	80 61       	ori	r24, 0x10	; 16
 114:	80 83       	st	Z, r24
		
		if(SDO_PIN)
 116:	8c 91       	ld	r24, X
 118:	85 ff       	sbrs	r24, 5
 11a:	e8 cf       	rjmp	.-48     	; 0xec <__stack+0xd>
			RGIT=1;		

		SCK_LOW;
 11c:	eb e3       	ldi	r30, 0x3B	; 59
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	80 83       	st	Z, r24
		SDI_HI;
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
		nSEL_HI;
 12c:	80 81       	ld	r24, Z
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	80 83       	st	Z, r24
		}while(!RGIT);

	/* Transmitter Register Write Command */
	WriteCMD(CMD|data);
 132:	89 2f       	mov	r24, r25
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	98 6b       	ori	r25, 0xB8	; 184
 138:	9e df       	rcall	.-196    	; 0x76 <WriteCMD>
}
 13a:	08 95       	ret

0000013c <RMFM12_send>:

/***************************************************************************
RMFM12_send - Send FSK data 
***************************************************************************/
void RMFM12_send(uint16_t data)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	08 2f       	mov	r16, r24
 142:	19 2f       	mov	r17, r25
	/* RF packet [0xAA 0xAA 0xAA 0x2D 0xD4 Data_MSB Data_LSB] */
	Write_FSK_byte(0xAA);		// Send Preamble
 144:	8a ea       	ldi	r24, 0xAA	; 170
 146:	bf df       	rcall	.-130    	; 0xc6 <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 148:	8a ea       	ldi	r24, 0xAA	; 170
 14a:	bd df       	rcall	.-134    	; 0xc6 <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 14c:	8a ea       	ldi	r24, 0xAA	; 170
 14e:	bb df       	rcall	.-138    	; 0xc6 <Write_FSK_byte>
	Write_FSK_byte(0x2D);		// Send sync word
 150:	8d e2       	ldi	r24, 0x2D	; 45
 152:	b9 df       	rcall	.-142    	; 0xc6 <Write_FSK_byte>
	Write_FSK_byte(0xD4);		// Send sync word
 154:	84 ed       	ldi	r24, 0xD4	; 212
 156:	b7 df       	rcall	.-146    	; 0xc6 <Write_FSK_byte>
	Write_FSK_byte(data>>8);	// Send Data
 158:	81 2f       	mov	r24, r17
 15a:	b5 df       	rcall	.-150    	; 0xc6 <Write_FSK_byte>
	Write_FSK_byte(data&0xFF);	// Send Data
 15c:	80 2f       	mov	r24, r16
 15e:	b3 df       	rcall	.-154    	; 0xc6 <Write_FSK_byte>
}
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <RFTransmit_packet>:

/***************************************************************************
RFTransmit_packet - Transmit data to RF
***************************************************************************/
void RFTransmit_packet(uint8_t RefNr, uint16_t Value)
{
 166:	df 92       	push	r13
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	d8 2e       	mov	r13, r24
 172:	8b 01       	movw	r16, r22
	/* Prepare 16bit packet */
	packet|=(RefNr&0x07)<<13;	// RefNr 3 bits
	packet|=(Value&0x1FFF);		// Value 13 bits
	
	/* Send 16bit packet */
	RF_TXmode;
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	92 e8       	ldi	r25, 0x82	; 130
 178:	7e df       	rcall	.-260    	; 0x76 <WriteCMD>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	0f 2e       	mov	r0, r31
 17c:	f8 e8       	ldi	r31, 0x88	; 136
 17e:	ef 2e       	mov	r14, r31
 180:	f3 e1       	ldi	r31, 0x13	; 19
 182:	ff 2e       	mov	r15, r31
 184:	f0 2d       	mov	r31, r0
 186:	c7 01       	movw	r24, r14
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <RFTransmit_packet+0x22>
	_delay_ms(2);
	RMFM12_send(packet);
 18c:	9d 2d       	mov	r25, r13
 18e:	92 95       	swap	r25
 190:	99 0f       	add	r25, r25
 192:	90 7e       	andi	r25, 0xE0	; 224
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	1f 71       	andi	r17, 0x1F	; 31
 198:	80 2b       	or	r24, r16
 19a:	91 2b       	or	r25, r17
 19c:	cf df       	rcall	.-98     	; 0x13c <RMFM12_send>
 19e:	c7 01       	movw	r24, r14
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <RFTransmit_packet+0x3a>
	_delay_ms(2);
	RF_Iddle;
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	92 e8       	ldi	r25, 0x82	; 130
 1a8:	66 df       	rcall	.-308    	; 0x76 <WriteCMD>
}
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	08 95       	ret

000001b6 <RFM12_init>:
void RFM12_init(void)
{
	uint16_t F;

	/* Low Battery Detector and Microcontroller Clock Divider Command */
	WriteCMD(0xC0E0);	// 10MHz output  
 1b6:	80 ee       	ldi	r24, 0xE0	; 224
 1b8:	90 ec       	ldi	r25, 0xC0	; 192
 1ba:	5d df       	rcall	.-326    	; 0x76 <WriteCMD>
	asm("nop");
 1bc:	00 00       	nop
	asm("nop");
 1be:	00 00       	nop
	asm("nop");
 1c0:	00 00       	nop

	/* Configuration Setting Command  */
	WriteCMD(0x80DF);	// 433MHz Band; Enable TX registere; Enable RX FIFO buffer, 16pF
 1c2:	8f ed       	ldi	r24, 0xDF	; 223
 1c4:	90 e8       	ldi	r25, 0x80	; 128
 1c6:	57 df       	rcall	.-338    	; 0x76 <WriteCMD>
	
	/* Frequency Setting Command */
	F = Fc(439.00);
	WriteCMD(0xA000|F);	// Fcarrier = 439.00MHz
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	9e ea       	ldi	r25, 0xAE	; 174
 1cc:	54 df       	rcall	.-344    	; 0x76 <WriteCMD>

	/* Data Rate Command */
	WriteCMD(0xC629);	// error !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 1ce:	89 e2       	ldi	r24, 0x29	; 41
 1d0:	96 ec       	ldi	r25, 0xC6	; 198
 1d2:	51 df       	rcall	.-350    	; 0x76 <WriteCMD>
	//WriteCMD(0xC602);	// 114.943kbps

	/* Receiver Control Command */
	WriteCMD(0x9420);	// VDI, FAST, Bandwidth 400kHz, LNA gain 0dBm, -103dBm
 1d4:	80 e2       	ldi	r24, 0x20	; 32
 1d6:	94 e9       	ldi	r25, 0x94	; 148
 1d8:	4e df       	rcall	.-356    	; 0x76 <WriteCMD>

	/* Data Filter Command */
	WriteCMD(0xC2AC);	// Auto-lock; Digital filter;
 1da:	8c ea       	ldi	r24, 0xAC	; 172
 1dc:	92 ec       	ldi	r25, 0xC2	; 194
 1de:	4b df       	rcall	.-362    	; 0x76 <WriteCMD>
	
	/* FIFO and Reset Mode Command */
	WriteCMD(0xCAF3);	// FIFO interrupt level: 16bits; FIFO fill start condition: Sync-word; Enable FIFO fill; dr - set to "1"
 1e0:	83 ef       	ldi	r24, 0xF3	; 243
 1e2:	9a ec       	ldi	r25, 0xCA	; 202
 1e4:	48 df       	rcall	.-368    	; 0x76 <WriteCMD>
	
	/* AFC Command */
	WriteCMD(0xC49B);	// AFC setting: Keep offset when VDI hi; select range limit +15/-16; Enable AFC funcition; st,oe - set to "1"
 1e6:	8b e9       	ldi	r24, 0x9B	; 155
 1e8:	94 ec       	ldi	r25, 0xC4	; 196
 1ea:	45 df       	rcall	.-374    	; 0x76 <WriteCMD>
	
	/* TX Configuration Control Command */
	WriteCMD(0x98D0);	// 210kHz deviation; MAX OUT
 1ec:	80 ed       	ldi	r24, 0xD0	; 208
 1ee:	98 e9       	ldi	r25, 0x98	; 152
 1f0:	42 df       	rcall	.-380    	; 0x76 <WriteCMD>

	/* Power Management Command */
	RF_Iddle;
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	92 e8       	ldi	r25, 0x82	; 130
 1f6:	3f df       	rcall	.-386    	; 0x76 <WriteCMD>
}
 1f8:	08 95       	ret

000001fa <RMFM12_readFIFO>:

/***************************************************************************
RMFM12_readFIFO - Read FIFO
***************************************************************************/
uint16_t RMFM12_readFIFO(void)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
	uint16_t Result=0;

	SCK_LOW;
 1fe:	eb e3       	ldi	r30, 0x3B	; 59
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8f 7e       	andi	r24, 0xEF	; 239
 206:	80 83       	st	Z, r24
	SDI_LOW;
 208:	80 81       	ld	r24, Z
 20a:	8f 7b       	andi	r24, 0xBF	; 191
 20c:	80 83       	st	Z, r24
	nSEL_LOW;
 20e:	80 81       	ld	r24, Z
 210:	87 7f       	andi	r24, 0xF7	; 247
 212:	80 83       	st	Z, r24
 214:	90 e0       	ldi	r25, 0x00	; 0

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
		{ 
		SCK_HI;
 216:	80 81       	ld	r24, Z
 218:	80 61       	ori	r24, 0x10	; 16
 21a:	80 83       	st	Z, r24
		SCK_LOW;
 21c:	80 81       	ld	r24, Z
 21e:	8f 7e       	andi	r24, 0xEF	; 239
 220:	80 83       	st	Z, r24
	SCK_LOW;
	SDI_LOW;
	nSEL_LOW;

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
 222:	9f 5f       	subi	r25, 0xFF	; 255
 224:	90 31       	cpi	r25, 0x10	; 16
 226:	b9 f7       	brne	.-18     	; 0x216 <RMFM12_readFIFO+0x1c>
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
		{ 
		Result = Result<<1;
		
		if(SDO_PIN)
 22e:	a9 e3       	ldi	r26, 0x39	; 57
 230:	b0 e0       	ldi	r27, 0x00	; 0
			Result|=1;

		SCK_HI;
 232:	eb e3       	ldi	r30, 0x3B	; 59
 234:	f0 e0       	ldi	r31, 0x00	; 0
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
		{ 
		Result = Result<<1;
 236:	cc 0f       	add	r28, r28
 238:	dd 1f       	adc	r29, r29
		
		if(SDO_PIN)
 23a:	8c 91       	ld	r24, X
 23c:	85 fd       	sbrc	r24, 5
			Result|=1;
 23e:	c1 60       	ori	r28, 0x01	; 1

		SCK_HI;
 240:	80 81       	ld	r24, Z
 242:	80 61       	ori	r24, 0x10	; 16
 244:	80 83       	st	Z, r24
		SCK_LOW;
 246:	80 81       	ld	r24, Z
 248:	8f 7e       	andi	r24, 0xEF	; 239
 24a:	80 83       	st	Z, r24
		SCK_HI;
		SCK_LOW;
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
 24c:	9f 5f       	subi	r25, 0xFF	; 255
 24e:	90 31       	cpi	r25, 0x10	; 16
 250:	91 f7       	brne	.-28     	; 0x236 <RMFM12_readFIFO+0x3c>

		SCK_HI;
		SCK_LOW;
		}

	nSEL_HI;
 252:	eb e3       	ldi	r30, 0x3B	; 59
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	80 83       	st	Z, r24
	
	WriteCMD(0xCA80);	// reset FIFO
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	9a ec       	ldi	r25, 0xCA	; 202
 260:	0a df       	rcall	.-492    	; 0x76 <WriteCMD>
	WriteCMD(0xCAF3);
 262:	83 ef       	ldi	r24, 0xF3	; 243
 264:	9a ec       	ldi	r25, 0xCA	; 202
 266:	07 df       	rcall	.-498    	; 0x76 <WriteCMD>

	return(Result);
}
 268:	8c 2f       	mov	r24, r28
 26a:	9d 2f       	mov	r25, r29
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <BlinkNumber>:

/***************************************************************************
BlinkNumber - 
***************************************************************************/
void BlinkNumber(uint8_t RefNr)
{
 272:	78 2f       	mov	r23, r24
	LED2_ON;
 274:	eb e3       	ldi	r30, 0x3B	; 59
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	80 83       	st	Z, r24
	LED1_OFF;
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
 284:	28 e8       	ldi	r18, 0x88	; 136
 286:	33 e1       	ldi	r19, 0x13	; 19
 288:	4a ef       	ldi	r20, 0xFA	; 250
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	ca 01       	movw	r24, r20
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <BlinkNumber+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 292:	21 50       	subi	r18, 0x01	; 1
 294:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 296:	d1 f7       	brne	.-12     	; 0x28c <BlinkNumber+0x1a>
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
 298:	77 23       	and	r23, r23
 29a:	f9 f0       	breq	.+62     	; 0x2da <BlinkNumber+0x68>
 29c:	60 e0       	ldi	r22, 0x00	; 0
	{
		LED1_ON;
 29e:	eb e3       	ldi	r30, 0x3B	; 59
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	a4 ec       	ldi	r26, 0xC4	; 196
 2a4:	b9 e0       	ldi	r27, 0x09	; 9
 2a6:	4a ef       	ldi	r20, 0xFA	; 250
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	8d 7f       	andi	r24, 0xFD	; 253
 2ae:	80 83       	st	Z, r24
 2b0:	9d 01       	movw	r18, r26
 2b2:	ca 01       	movw	r24, r20
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <BlinkNumber+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2bc:	d1 f7       	brne	.-12     	; 0x2b2 <BlinkNumber+0x40>
		_delay_ms(250);
		LED1_OFF;
 2be:	80 81       	ld	r24, Z
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	80 83       	st	Z, r24
 2c4:	9d 01       	movw	r18, r26
 2c6:	ca 01       	movw	r24, r20
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <BlinkNumber+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d0:	d1 f7       	brne	.-12     	; 0x2c6 <BlinkNumber+0x54>
{
	LED2_ON;
	LED1_OFF;
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
 2d2:	6f 5f       	subi	r22, 0xFF	; 255
 2d4:	67 17       	cp	r22, r23
 2d6:	48 f3       	brcs	.-46     	; 0x2aa <BlinkNumber+0x38>
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <BlinkNumber+0x7c>
 2da:	20 e1       	ldi	r18, 0x10	; 16
 2dc:	37 e2       	ldi	r19, 0x27	; 39
 2de:	4a ef       	ldi	r20, 0xFA	; 250
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	ca 01       	movw	r24, r20
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <BlinkNumber+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ec:	d1 f7       	brne	.-12     	; 0x2e2 <BlinkNumber+0x70>
		_delay_ms(250);
	}
	if (RefNr==0)
		_delay_ms(1000);
	
	LED1_OFF;
 2ee:	eb e3       	ldi	r30, 0x3B	; 59
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	80 83       	st	Z, r24
	LED2_OFF;
 2f8:	80 81       	ld	r24, Z
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	80 83       	st	Z, r24
}
 2fe:	08 95       	ret

00000300 <main>:
***************************************************************************/
volatile uint16_t laikas;


int main(void)
{
 300:	2f 92       	push	r2
 302:	3f 92       	push	r3
 304:	4f 92       	push	r4
 306:	5f 92       	push	r5
 308:	6f 92       	push	r6
 30a:	7f 92       	push	r7
 30c:	9f 92       	push	r9
 30e:	af 92       	push	r10
 310:	bf 92       	push	r11
 312:	cf 92       	push	r12
 314:	df 92       	push	r13
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	88 ea       	ldi	r24, 0xA8	; 168
 324:	91 e6       	ldi	r25, 0x61	; 97
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x26>
	uint8_t TimeOutFlag;

	_delay_ms(10);

	PORTS_int();
 32a:	94 de       	rcall	.-728    	; 0x54 <PORTS_int>
	RFM12_init();
 32c:	44 df       	rcall	.-376    	; 0x1b6 <RFM12_init>
	Timer1_int();
 32e:	88 de       	rcall	.-752    	; 0x40 <Timer1_int>
	BlinkNumber(RefPointNr);
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	9f df       	rcall	.-194    	; 0x272 <BlinkNumber>

	RF_FIFORecog;
 334:	80 ef       	ldi	r24, 0xF0	; 240
 336:	9a ec       	ldi	r25, 0xCA	; 202
 338:	9e de       	rcall	.-708    	; 0x76 <WriteCMD>
 33a:	83 ef       	ldi	r24, 0xF3	; 243
 33c:	9a ec       	ldi	r25, 0xCA	; 202
 33e:	9b de       	rcall	.-714    	; 0x76 <WriteCMD>
	RF_RXmode;
 340:	88 ed       	ldi	r24, 0xD8	; 216
 342:	92 e8       	ldi	r25, 0x82	; 130
 344:	98 de       	rcall	.-720    	; 0x76 <WriteCMD>

	while(1)
	{ 
		/* Wait for interupt from RFM12 (received Data) */
		if(!nIRQ_PIN)	
 346:	c9 e3       	ldi	r28, 0x39	; 57
 348:	d0 e0       	ldi	r29, 0x00	; 0
		{
			/* Start 16bit Timer1 immediately for ToF measurments */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 34a:	0f 2e       	mov	r0, r31
 34c:	fe e4       	ldi	r31, 0x4E	; 78
 34e:	af 2e       	mov	r10, r31
 350:	bb 24       	eor	r11, r11
 352:	f0 2d       	mov	r31, r0
 354:	99 24       	eor	r9, r9
 356:	68 94       	set
 358:	91 f8       	bld	r9, 1
			{
				/* RF Trasmiter/Receiver modes OFF to save power */
				RF_Iddle;

	    		/* Send start signal to front-end (PW0268) */	   	   		    
			    DDRA |= (1<<PA0);	// Configure PA0 as Output
 35a:	0f 2e       	mov	r0, r31
 35c:	fa e3       	ldi	r31, 0x3A	; 58
 35e:	cf 2e       	mov	r12, r31
 360:	dd 24       	eor	r13, r13
 362:	f0 2d       	mov	r31, r0
				PORTA &= ~(1<<PA0);	// Clear PA0
 364:	0b e3       	ldi	r16, 0x3B	; 59
 366:	10 e0       	ldi	r17, 0x00	; 0
 368:	0f 2e       	mov	r0, r31
 36a:	fa ef       	ldi	r31, 0xFA	; 250
 36c:	6f 2e       	mov	r6, r31
 36e:	77 24       	eor	r7, r7
 370:	f0 2d       	mov	r31, r0

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
				{
					if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
 372:	0f 2e       	mov	r0, r31
 374:	fb e2       	ldi	r31, 0x2B	; 43
 376:	ef 2e       	mov	r14, r31
 378:	ff 24       	eor	r15, r15
 37a:	f0 2d       	mov	r31, r0
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 37c:	0f 2e       	mov	r0, r31
 37e:	fc e4       	ldi	r31, 0x4C	; 76
 380:	4f 2e       	mov	r4, r31
 382:	55 24       	eor	r5, r5
 384:	f0 2d       	mov	r31, r0
 386:	0f 2e       	mov	r0, r31
 388:	f8 eb       	ldi	r31, 0xB8	; 184
 38a:	2f 2e       	mov	r2, r31
 38c:	f8 e8       	ldi	r31, 0x88	; 136
 38e:	3f 2e       	mov	r3, r31
 390:	f0 2d       	mov	r31, r0
	RF_RXmode;

	while(1)
	{ 
		/* Wait for interupt from RFM12 (received Data) */
		if(!nIRQ_PIN)	
 392:	88 81       	ld	r24, Y
 394:	88 23       	and	r24, r24
 396:	ec f3       	brlt	.-6      	; 0x392 <main+0x92>
		{
			/* Start 16bit Timer1 immediately for ToF measurments */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 398:	f5 01       	movw	r30, r10
 39a:	90 82       	st	Z, r9

			/* Check received data */
			if(RMFM12_readFIFO() == 0x1454)
 39c:	2e df       	rcall	.-420    	; 0x1fa <RMFM12_readFIFO>
 39e:	84 55       	subi	r24, 0x54	; 84
 3a0:	94 41       	sbci	r25, 0x14	; 20
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <main+0xa6>
 3a4:	44 c0       	rjmp	.+136    	; 0x42e <main+0x12e>
			{
				/* RF Trasmiter/Receiver modes OFF to save power */
				RF_Iddle;
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	92 e8       	ldi	r25, 0x82	; 130
 3aa:	65 de       	rcall	.-822    	; 0x76 <WriteCMD>

	    		/* Send start signal to front-end (PW0268) */	   	   		    
			    DDRA |= (1<<PA0);	// Configure PA0 as Output
 3ac:	f6 01       	movw	r30, r12
 3ae:	80 81       	ld	r24, Z
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	80 83       	st	Z, r24
				PORTA &= ~(1<<PA0);	// Clear PA0
 3b4:	f8 01       	movw	r30, r16
 3b6:	80 81       	ld	r24, Z
 3b8:	8e 7f       	andi	r24, 0xFE	; 254
 3ba:	80 83       	st	Z, r24
 3bc:	c3 01       	movw	r24, r6
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0xbe>
				_delay_us(100);	
				PORTA |= (1<<PA0);	// Set PA0
 3c2:	80 81       	ld	r24, Z
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	80 83       	st	Z, r24
				DDRA &= ~(1<<PA0);	// Configure PA0 as Input
 3c8:	f6 01       	movw	r30, r12
 3ca:	80 81       	ld	r24, Z
 3cc:	8e 7f       	andi	r24, 0xFE	; 254
 3ce:	80 83       	st	Z, r24
			
				LED1_ON;			// RF received
 3d0:	f8 01       	movw	r30, r16
 3d2:	80 81       	ld	r24, Z
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	80 83       	st	Z, r24
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <main+0xe2>

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
				{
					if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
 3da:	f7 01       	movw	r30, r14
 3dc:	80 81       	ld	r24, Z
 3de:	80 fd       	sbrc	r24, 0
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <main+0xea>
			
				LED1_ON;			// RF received

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
 3e2:	88 81       	ld	r24, Y
 3e4:	80 fd       	sbrc	r24, 0
 3e6:	f9 cf       	rjmp	.-14     	; 0x3da <main+0xda>
 3e8:	2d c0       	rjmp	.+90     	; 0x444 <main+0x144>
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 3ea:	f2 01       	movw	r30, r4
 3ec:	80 81       	ld	r24, Z
 3ee:	91 81       	ldd	r25, Z+1	; 0x01
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	90 93 61 00 	sts	0x0061, r25
 400:	80 93 60 00 	sts	0x0060, r24
 404:	0d c0       	rjmp	.+26     	; 0x420 <main+0x120>
				if (!TimeOutFlag)
				{
					LED2_ON;		// UG signal received
					
					/* Wait for Timer1 Overflow Flag to ensure all RefPoints allready received UG signal */
					while( !(TIFR1&(1<<TOV1)) );
 406:	f7 01       	movw	r30, r14
 408:	80 81       	ld	r24, Z
 40a:	80 ff       	sbrs	r24, 0
 40c:	fc cf       	rjmp	.-8      	; 0x406 <main+0x106>
 40e:	c1 01       	movw	r24, r2
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <main+0x110>

					/* Send ToF to Host */
					_delay_ms(RFTransmit_ms*RefPointNr);
					RFTransmit_packet(RefPointNr,laikas);
 414:	60 91 60 00 	lds	r22, 0x0060
 418:	70 91 61 00 	lds	r23, 0x0061
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	a3 de       	rcall	.-698    	; 0x166 <RFTransmit_packet>
				}
	  			LED1_OFF;
 420:	f8 01       	movw	r30, r16
 422:	80 81       	ld	r24, Z
 424:	82 60       	ori	r24, 0x02	; 2
 426:	80 83       	st	Z, r24
	 			LED2_OFF;
 428:	80 81       	ld	r24, Z
 42a:	84 60       	ori	r24, 0x04	; 4
 42c:	80 83       	st	Z, r24
			}

		/* Restart Timer1 Configuration */
		Timer1_int();
 42e:	08 de       	rcall	.-1008   	; 0x40 <Timer1_int>

		/* Restart the synchron pattern recognition */
		RF_FIFORecog;
 430:	80 ef       	ldi	r24, 0xF0	; 240
 432:	9a ec       	ldi	r25, 0xCA	; 202
 434:	20 de       	rcall	.-960    	; 0x76 <WriteCMD>
 436:	83 ef       	ldi	r24, 0xF3	; 243
 438:	9a ec       	ldi	r25, 0xCA	; 202
 43a:	1d de       	rcall	.-966    	; 0x76 <WriteCMD>
		RF_RXmode;		
 43c:	88 ed       	ldi	r24, 0xD8	; 216
 43e:	92 e8       	ldi	r25, 0x82	; 130
 440:	1a de       	rcall	.-972    	; 0x76 <WriteCMD>
 442:	a7 cf       	rjmp	.-178    	; 0x392 <main+0x92>
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 444:	f2 01       	movw	r30, r4
 446:	80 81       	ld	r24, Z
 448:	91 81       	ldd	r25, Z+1	; 0x01
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	90 93 61 00 	sts	0x0061, r25
 45a:	80 93 60 00 	sts	0x0060, r24

				/* Check TimeOutFlag */
				if (!TimeOutFlag)
				{
					LED2_ON;		// UG signal received
 45e:	f8 01       	movw	r30, r16
 460:	80 81       	ld	r24, Z
 462:	8b 7f       	andi	r24, 0xFB	; 251
 464:	80 83       	st	Z, r24
 466:	cf cf       	rjmp	.-98     	; 0x406 <main+0x106>

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
