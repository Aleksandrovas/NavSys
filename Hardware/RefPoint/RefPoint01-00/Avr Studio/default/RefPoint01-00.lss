
RefPoint01-00.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000ba  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000897  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002df  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000737  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000030c  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003a3  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000001b0  00000000  00000000  00001ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	e7 d0       	rcall	.+462    	; 0x1fa <main>
  2c:	94 c1       	rjmp	.+808    	; 0x356 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <PrepareRFpacket>:
Functions
***************************************************************************/


void PrepareRFpacket(uint8_t* RFpacket, uint16_t Data, uint8_t RefNr)
{
  30:	fc 01       	movw	r30, r24
	uint8_t MSB;
	uint8_t LSB;
	uint8_t ChkSum;
	
	RefNr = RefNr&0x0F;	// max number of Ref points is 16
  32:	4f 70       	andi	r20, 0x0F	; 15
	MSB = Data>>8;
	LSB = Data&0xFF;
	ChkSum = MSB + LSB + RefNr;
  34:	84 2f       	mov	r24, r20
  36:	87 0f       	add	r24, r23
  38:	86 0f       	add	r24, r22
	ChkSum = ChkSum&0x0F;		// use only 4 LSB bits of checksum

	/* Check sum just 4 bits */
	RFpacket[0] = (ChkSum<<4) | RefNr;
  3a:	82 95       	swap	r24
  3c:	80 7f       	andi	r24, 0xF0	; 240
  3e:	84 2b       	or	r24, r20
  40:	80 83       	st	Z, r24
	RFpacket[1] = Data>>8;
  42:	71 83       	std	Z+1, r23	; 0x01
	RFpacket[2] = Data&0xFF;
  44:	62 83       	std	Z+2, r22	; 0x02
}
  46:	08 95       	ret

00000048 <Timer1_init>:
Timer1_init - restart Timer1
***************************************************************************/
void Timer1_init(void)
{
	/* Reset 16bit Timer1 for ToF measurements */
	TCCR1B=0;			// Stop Timer/Counter1
  48:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
  4a:	58 9a       	sbi	0x0b, 0	; 11
	TCNT1=0;			// Reset Timer/Counter1
  4c:	1d bc       	out	0x2d, r1	; 45
  4e:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
  50:	1f bc       	out	0x2f, r1	; 47
}
  52:	08 95       	ret

00000054 <PORTS_init>:
PORTS_int - PORTS initialize
***************************************************************************/
void PORTS_init(void)
{
	/* Configure PW0268 Pin */
	PORTB &= ~(1<<PB2);	
  54:	c2 98       	cbi	0x18, 2	; 24
	DDRB |= (1<<PB2);
  56:	ba 9a       	sbi	0x17, 2	; 23
	
	/* Configure RF module pins */
	DDRA |= (1<<PA3) | (1<<PA4) | (1<<PA6);
  58:	8a b3       	in	r24, 0x1a	; 26
  5a:	88 65       	ori	r24, 0x58	; 88
  5c:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<SDO);
  5e:	dd 9a       	sbi	0x1b, 5	; 27
	
	/* Configure LEDS Pins */
	DDRA |= (1<<PA1) | (1<<PA2);
  60:	8a b3       	in	r24, 0x1a	; 26
  62:	86 60       	ori	r24, 0x06	; 6
  64:	8a bb       	out	0x1a, r24	; 26

	PW0268_OFF;
  66:	c2 98       	cbi	0x18, 2	; 24
	LED1_OFF;
  68:	d9 9a       	sbi	0x1b, 1	; 27
	LED2_OFF;
  6a:	da 9a       	sbi	0x1b, 2	; 27
}
  6c:	08 95       	ret

0000006e <WriteCMD>:
*************************************/
void WriteCMD(uint16_t CMD)
{
	uint8_t n = 16;

	nSEL_LOW;
  6e:	db 98       	cbi	0x1b, 3	; 27
  70:	20 e1       	ldi	r18, 0x10	; 16
  72:	09 c0       	rjmp	.+18     	; 0x86 <WriteCMD+0x18>
	
	while(n--)
		{
		SCK_LOW;
  74:	dc 98       	cbi	0x1b, 4	; 27

		if(CMD&0x8000)
  76:	97 ff       	sbrs	r25, 7
  78:	02 c0       	rjmp	.+4      	; 0x7e <WriteCMD+0x10>
			SDI_HI;
  7a:	de 9a       	sbi	0x1b, 6	; 27
  7c:	01 c0       	rjmp	.+2      	; 0x80 <WriteCMD+0x12>
		else
			SDI_LOW;
  7e:	de 98       	cbi	0x1b, 6	; 27

		SCK_HI;	
  80:	dc 9a       	sbi	0x1b, 4	; 27
			
		CMD = CMD<<1;
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
{
	uint8_t n = 16;

	nSEL_LOW;
	
	while(n--)
  86:	21 50       	subi	r18, 0x01	; 1
  88:	a8 f7       	brcc	.-22     	; 0x74 <WriteCMD+0x6>
		SCK_HI;	
			
		CMD = CMD<<1;
		}

	SCK_LOW;
  8a:	dc 98       	cbi	0x1b, 4	; 27
	nSEL_HI;
  8c:	db 9a       	sbi	0x1b, 3	; 27
}
  8e:	08 95       	ret

00000090 <RF12_init>:
void RF12_init(void)
{
	uint16_t Fcarr;

	/* Low Battery Detector and Micro controller Clock Divider Command: 10MHz output*/
	WriteCMD(0xC000 | (CLK10MHz<<5));
  90:	80 ee       	ldi	r24, 0xE0	; 224
  92:	90 ec       	ldi	r25, 0xC0	; 192
  94:	ec df       	rcall	.-40     	; 0x6e <WriteCMD>
  96:	88 ee       	ldi	r24, 0xE8	; 232
  98:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	2a ef       	ldi	r18, 0xFA	; 250
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <RF12_init+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <RF12_init+0xe>
	_delay_ms(100);
	WriteCMD(0xC000 | (CLK10MHz<<5));
  a8:	80 ee       	ldi	r24, 0xE0	; 224
  aa:	90 ec       	ldi	r25, 0xC0	; 192
  ac:	e0 df       	rcall	.-64     	; 0x6e <WriteCMD>
  ae:	88 ee       	ldi	r24, 0xE8	; 232
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	2a ef       	ldi	r18, 0xFA	; 250
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <RF12_init+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <RF12_init+0x26>
	_delay_ms(100);

	/* Configuration Setting Command  */
	WriteCMD(0x80DF);	// 433MHz Band; Enable TX registere; Enable RX FIFO buffer, 16pF
  c0:	8f ed       	ldi	r24, 0xDF	; 223
  c2:	90 e8       	ldi	r25, 0x80	; 128
  c4:	d4 df       	rcall	.-88     	; 0x6e <WriteCMD>
	
	/* Frequency Setting Command: F carrier = 432.00MHz */
	Fcarr = Fc(432.00);
	WriteCMD(0xA000|Fcarr);
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	93 ea       	ldi	r25, 0xA3	; 163
  ca:	d1 df       	rcall	.-94     	; 0x6e <WriteCMD>

	/* Data Rate Command: 114.943kbps */
	WriteCMD(0xC600|BR38_314kbs);
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	96 ec       	ldi	r25, 0xC6	; 198
  d0:	ce df       	rcall	.-100    	; 0x6e <WriteCMD>

	/* Receiver Control Command */
	WriteCMD(0x9420|Gain_0dB);	// VDI, FAST, Bandwidth 400kHz, LNA gain 0dBm, -103dBm
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	94 e9       	ldi	r25, 0x94	; 148
  d6:	cb df       	rcall	.-106    	; 0x6e <WriteCMD>

	/* Data Filter Command */
	WriteCMD(0xC2AC);	// Auto-lock; Digital filter;
  d8:	8c ea       	ldi	r24, 0xAC	; 172
  da:	92 ec       	ldi	r25, 0xC2	; 194
  dc:	c8 df       	rcall	.-112    	; 0x6e <WriteCMD>
	
	/* FIFO and Reset Mode Command */
	WriteCMD(0xCAF3);	// FIFO interrupt level: 16bits; FIFO fill start condition: Sync-word; Enable FIFO fill; dr - set to "1"
  de:	83 ef       	ldi	r24, 0xF3	; 243
  e0:	9a ec       	ldi	r25, 0xCA	; 202
  e2:	c5 df       	rcall	.-118    	; 0x6e <WriteCMD>
	
	/* AFC Command */
	WriteCMD(0xC49B);	// AFC setting: Keep offset when VDI hi; select range limit +15/-16; Enable AFC funcition; st,oe - set to "1"
  e4:	8b e9       	ldi	r24, 0x9B	; 155
  e6:	94 ec       	ldi	r25, 0xC4	; 196
  e8:	c2 df       	rcall	.-124    	; 0x6e <WriteCMD>
	
	/* TX Configuration Control Command */
	WriteCMD(0x98D0|P_0dBm);	// 210kHz deviation; MAX OUT
  ea:	80 ed       	ldi	r24, 0xD0	; 208
  ec:	98 e9       	ldi	r25, 0x98	; 152
  ee:	bf df       	rcall	.-130    	; 0x6e <WriteCMD>

	/* Power Management Command */
	RF_Iddle;
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	92 e8       	ldi	r25, 0x82	; 130
  f4:	bc df       	rcall	.-136    	; 0x6e <WriteCMD>
}
  f6:	08 95       	ret

000000f8 <Write_FSK_byte>:

/***************************************************************************
Write_FSK_byte - Write FSK 8bit data
***************************************************************************/
void Write_FSK_byte(uint8_t data)
{
  f8:	98 2f       	mov	r25, r24
	uint16_t CMD = 0xB800;
	uint8_t RGIT = 0;
	
	/* Wait for previous data latch */
	do{
		SCK_LOW;
  fa:	dc 98       	cbi	0x1b, 4	; 27
		nSEL_LOW;
  fc:	db 98       	cbi	0x1b, 3	; 27
		SDI_LOW;
  fe:	de 98       	cbi	0x1b, 6	; 27
		SCK_HI;
 100:	dc 9a       	sbi	0x1b, 4	; 27
		
		if(SDO_PIN)
 102:	89 b3       	in	r24, 0x19	; 25
			RGIT=1;		

		SCK_LOW;
 104:	dc 98       	cbi	0x1b, 4	; 27
		SDI_HI;
 106:	de 9a       	sbi	0x1b, 6	; 27
		nSEL_HI;
 108:	db 9a       	sbi	0x1b, 3	; 27
		}while(!RGIT);
 10a:	85 ff       	sbrs	r24, 5
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <Write_FSK_byte+0x2>

	/* Transmitter Register Write Command */
	WriteCMD(CMD|data);
 10e:	89 2f       	mov	r24, r25
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	98 6b       	ori	r25, 0xB8	; 184
 114:	ac df       	rcall	.-168    	; 0x6e <WriteCMD>
}
 116:	08 95       	ret

00000118 <RF12_Send>:

/***************************************************************************
RF12_Send - Send data 
***************************************************************************/
void RF12_Send(uint16_t Data)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
	uint8_t parity;

	Data = Data | (RefPointNr<<12);
 11c:	90 61       	ori	r25, 0x10	; 16
 11e:	9c 01       	movw	r18, r24
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	04 c0       	rjmp	.+8      	; 0x12c <RF12_Send+0x14>
{
	uint8_t parity=0;
    
	while (x > 0) 
	{
       parity = (parity + (x & 1)) % 2;
 124:	42 0f       	add	r20, r18
 126:	41 70       	andi	r20, 0x01	; 1
       x >>= 1;
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18

uint8_t GetParity(uint16_t x) 
{
	uint8_t parity=0;
    
	while (x > 0) 
 12c:	21 15       	cp	r18, r1
 12e:	31 05       	cpc	r19, r1
 130:	c9 f7       	brne	.-14     	; 0x124 <RF12_Send+0xc>
{
	uint8_t parity;

	Data = Data | (RefPointNr<<12);
	parity = GetParity(Data)&0x01;
	Data = Data | (parity<<15);
 132:	14 2f       	mov	r17, r20
 134:	17 95       	ror	r17
 136:	11 27       	eor	r17, r17
 138:	17 95       	ror	r17
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	08 2b       	or	r16, r24
 13e:	19 2b       	or	r17, r25

	/* Send Preamble and Send sync word */
	Write_FSK_byte(0xAA);		// Send Preamble
 140:	8a ea       	ldi	r24, 0xAA	; 170
 142:	da df       	rcall	.-76     	; 0xf8 <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 144:	8a ea       	ldi	r24, 0xAA	; 170
 146:	d8 df       	rcall	.-80     	; 0xf8 <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 148:	8a ea       	ldi	r24, 0xAA	; 170
 14a:	d6 df       	rcall	.-84     	; 0xf8 <Write_FSK_byte>
	Write_FSK_byte(0x2D);		// Send sync word
 14c:	8d e2       	ldi	r24, 0x2D	; 45
 14e:	d4 df       	rcall	.-88     	; 0xf8 <Write_FSK_byte>
	Write_FSK_byte(0xD4);		// Send sync word
 150:	84 ed       	ldi	r24, 0xD4	; 212
 152:	d2 df       	rcall	.-92     	; 0xf8 <Write_FSK_byte>

	/* Send Data */
	Write_FSK_byte(Data>>8);
 154:	81 2f       	mov	r24, r17
 156:	d0 df       	rcall	.-96     	; 0xf8 <Write_FSK_byte>
	Write_FSK_byte(Data&0xFF);
 158:	80 2f       	mov	r24, r16
 15a:	ce df       	rcall	.-100    	; 0xf8 <Write_FSK_byte>
}
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <RF12_ReadFIFO>:
***************************************************************************/
uint16_t RF12_ReadFIFO(void)
{
	uint16_t Result=0;

	SCK_LOW;
 162:	dc 98       	cbi	0x1b, 4	; 27
	SDI_LOW;
 164:	de 98       	cbi	0x1b, 6	; 27
	nSEL_LOW;
 166:	db 98       	cbi	0x1b, 3	; 27
 168:	80 e0       	ldi	r24, 0x00	; 0

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
		{ 
		SCK_HI;
 16a:	dc 9a       	sbi	0x1b, 4	; 27
		SCK_LOW;
 16c:	dc 98       	cbi	0x1b, 4	; 27
	SCK_LOW;
	SDI_LOW;
	nSEL_LOW;

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 31       	cpi	r24, 0x10	; 16
 172:	d9 f7       	brne	.-10     	; 0x16a <RF12_ReadFIFO+0x8>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
		{ 
		Result = Result<<1;
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
		
		if(SDO_PIN)
 17e:	cd 99       	sbic	0x19, 5	; 25
			Result|=1;
 180:	21 60       	ori	r18, 0x01	; 1

		SCK_HI;
 182:	dc 9a       	sbi	0x1b, 4	; 27
		SCK_LOW;
 184:	dc 98       	cbi	0x1b, 4	; 27
		SCK_HI;
		SCK_LOW;
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 31       	cpi	r24, 0x10	; 16
 18a:	b9 f7       	brne	.-18     	; 0x17a <RF12_ReadFIFO+0x18>

		SCK_HI;
		SCK_LOW;
		}

	nSEL_HI;
 18c:	db 9a       	sbi	0x1b, 3	; 27

	return(Result);
}
 18e:	c9 01       	movw	r24, r18
 190:	08 95       	ret

00000192 <BlinkNumber>:
/***************************************************************************
BlinkNumber - 
***************************************************************************/
void BlinkNumber(uint8_t RefNr)
{
	LED2_ON;
 192:	da 98       	cbi	0x1b, 2	; 27
	LED1_OFF;
 194:	d9 9a       	sbi	0x1b, 1	; 27
 196:	28 e8       	ldi	r18, 0x88	; 136
 198:	33 e1       	ldi	r19, 0x13	; 19
 19a:	4a ef       	ldi	r20, 0xFA	; 250
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	fa 01       	movw	r30, r20
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <BlinkNumber+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a8:	d1 f7       	brne	.-12     	; 0x19e <BlinkNumber+0xc>
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	4a ef       	ldi	r20, 0xFA	; 250
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	13 c0       	rjmp	.+38     	; 0x1d8 <BlinkNumber+0x46>
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
	{
		LED1_ON;
 1b2:	d9 98       	cbi	0x1b, 1	; 27
 1b4:	24 ec       	ldi	r18, 0xC4	; 196
 1b6:	39 e0       	ldi	r19, 0x09	; 9
 1b8:	fa 01       	movw	r30, r20
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <BlinkNumber+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	d1 f7       	brne	.-12     	; 0x1b8 <BlinkNumber+0x26>
		_delay_ms(250);
		LED1_OFF;
 1c4:	d9 9a       	sbi	0x1b, 1	; 27
 1c6:	24 ec       	ldi	r18, 0xC4	; 196
 1c8:	39 e0       	ldi	r19, 0x09	; 9
 1ca:	fa 01       	movw	r30, r20
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <BlinkNumber+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	d1 f7       	brne	.-12     	; 0x1ca <BlinkNumber+0x38>
{
	LED2_ON;
	LED1_OFF;
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	98 17       	cp	r25, r24
 1da:	58 f3       	brcs	.-42     	; 0x1b2 <BlinkNumber+0x20>
		LED1_ON;
		_delay_ms(250);
		LED1_OFF;
		_delay_ms(250);
	}
	if (RefNr==0)
 1dc:	88 23       	and	r24, r24
 1de:	51 f4       	brne	.+20     	; 0x1f4 <BlinkNumber+0x62>
	{
		LED1_ON;
 1e0:	d9 98       	cbi	0x1b, 1	; 27
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	97 e2       	ldi	r25, 0x27	; 39
 1e6:	2a ef       	ldi	r18, 0xFA	; 250
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <BlinkNumber+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	d9 f7       	brne	.-10     	; 0x1ea <BlinkNumber+0x58>
		_delay_ms(1000);
	}
	
	LED1_OFF;
 1f4:	d9 9a       	sbi	0x1b, 1	; 27
	LED2_OFF;
 1f6:	da 9a       	sbi	0x1b, 2	; 27
}
 1f8:	08 95       	ret

000001fa <main>:
#include <util/delay.h>
#include "main.h"


int main(void)
{
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	00 d0       	rcall	.+0      	; 0x210 <main+0x16>
 210:	0f 92       	push	r0
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	88 ee       	ldi	r24, 0xE8	; 232
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	2a ef       	ldi	r18, 0xFA	; 250
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 224:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	d9 f7       	brne	.-10     	; 0x21e <main+0x24>
	uint8_t parity;

	/* Wait for Vcc stabilize */
	_delay_ms(100);

	PORTS_init();
 228:	15 df       	rcall	.-470    	; 0x54 <PORTS_init>
	RF12_init();
 22a:	32 df       	rcall	.-412    	; 0x90 <RF12_init>
Timer1_init - restart Timer1
***************************************************************************/
void Timer1_init(void)
{
	/* Reset 16bit Timer1 for ToF measurements */
	TCCR1B=0;			// Stop Timer/Counter1
 22c:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
 22e:	58 9a       	sbi	0x0b, 0	; 11
	TCNT1=0;			// Reset Timer/Counter1
 230:	1d bc       	out	0x2d, r1	; 45
 232:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
 234:	1f bc       	out	0x2f, r1	; 47
	_delay_ms(100);

	PORTS_init();
	RF12_init();
	Timer1_init();
	BlinkNumber(RefPointNr);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	ac df       	rcall	.-168    	; 0x192 <BlinkNumber>

	RF_FIFORecog;
 23a:	81 ef       	ldi	r24, 0xF1	; 241
 23c:	9a ec       	ldi	r25, 0xCA	; 202
 23e:	17 df       	rcall	.-466    	; 0x6e <WriteCMD>
 240:	83 ef       	ldi	r24, 0xF3	; 243
 242:	9a ec       	ldi	r25, 0xCA	; 202
 244:	14 df       	rcall	.-472    	; 0x6e <WriteCMD>
	RF_RXmode;
 246:	88 ed       	ldi	r24, 0xD8	; 216
 248:	92 e8       	ldi	r25, 0x82	; 130
 24a:	11 df       	rcall	.-478    	; 0x6e <WriteCMD>
	RF12_ReadFIFO();
 24c:	8a df       	rcall	.-236    	; 0x162 <RF12_ReadFIFO>
	{
		/* Wait for interrupt from RF (received Data) */
		if(!nIRQ_PIN)	
		{
			/* Start 16bit Timer1 immediately for ToF measurements */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 24e:	02 e0       	ldi	r16, 0x02	; 2
 250:	a0 2e       	mov	r10, r16
 252:	1e ee       	ldi	r17, 0xEE	; 238
 254:	c1 2e       	mov	r12, r17
 256:	12 e0       	ldi	r17, 0x02	; 2
 258:	d1 2e       	mov	r13, r17
					TimeOutFlag = 0;
					while(PINA&(1<<PA0))
					{
						if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
						{
							TimeOutFlag = 1;
 25a:	04 ec       	ldi	r16, 0xC4	; 196
 25c:	19 e0       	ldi	r17, 0x09	; 9
 25e:	b8 ee       	ldi	r27, 0xE8	; 232
 260:	eb 2e       	mov	r14, r27
 262:	b3 e0       	ldi	r27, 0x03	; 3
 264:	fb 2e       	mov	r15, r27
 266:	bb 24       	eor	r11, r11
 268:	b3 94       	inc	r11
	RF12_ReadFIFO();

	while(1)
	{
		/* Wait for interrupt from RF (received Data) */
		if(!nIRQ_PIN)	
 26a:	cf 99       	sbic	0x19, 7	; 25
 26c:	fe cf       	rjmp	.-4      	; 0x26a <main+0x70>
		{
			/* Start 16bit Timer1 immediately for ToF measurements */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 26e:	ae bc       	out	0x2e, r10	; 46

			temp = RF12_ReadFIFO();
 270:	78 df       	rcall	.-272    	; 0x162 <RF12_ReadFIFO>
			parity = temp>>15;
			temp = temp&0x7FFF;
 272:	fc 01       	movw	r30, r24
 274:	ff 77       	andi	r31, 0x7F	; 127
 276:	9f 01       	movw	r18, r30
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	04 c0       	rjmp	.+8      	; 0x284 <main+0x8a>
{
	uint8_t parity=0;
    
	while (x > 0) 
	{
       parity = (parity + (x & 1)) % 2;
 27c:	42 0f       	add	r20, r18
 27e:	41 70       	andi	r20, 0x01	; 1
       x >>= 1;
 280:	36 95       	lsr	r19
 282:	27 95       	ror	r18

uint8_t GetParity(uint16_t x) 
{
	uint8_t parity=0;
    
	while (x > 0) 
 284:	21 15       	cp	r18, r1
 286:	31 05       	cpc	r19, r1
 288:	c9 f7       	brne	.-14     	; 0x27c <main+0x82>
			temp = RF12_ReadFIFO();
			parity = temp>>15;
			temp = temp&0x7FFF;

			/* Check received data */		
			if ( (GetParity(temp) == parity) && (temp > 0) )
 28a:	89 2f       	mov	r24, r25
 28c:	88 1f       	adc	r24, r24
 28e:	88 27       	eor	r24, r24
 290:	88 1f       	adc	r24, r24
 292:	48 17       	cp	r20, r24
 294:	09 f0       	breq	.+2      	; 0x298 <main+0x9e>
 296:	46 c0       	rjmp	.+140    	; 0x324 <main+0x12a>
 298:	30 97       	sbiw	r30, 0x00	; 0
 29a:	09 f4       	brne	.+2      	; 0x29e <main+0xa4>
 29c:	43 c0       	rjmp	.+134    	; 0x324 <main+0x12a>
			{
				/* Start Timout Timer and clear Data Buffer */
				if(temp == StartCode)
 29e:	e4 55       	subi	r30, 0x54	; 84
 2a0:	f4 41       	sbci	r31, 0x14	; 20
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <main+0xac>
 2a4:	3f c0       	rjmp	.+126    	; 0x324 <main+0x12a>
LED1_ON;
_delay_us(1000);
RF_Iddle;*/

					/* Turn ON PW0268 */
					PW0268_ON;
 2a6:	c2 9a       	sbi	0x18, 2	; 24
 2a8:	c6 01       	movw	r24, r12
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0xb0>
					_delay_us(300);
				
					/* RF Transmitter/Receiver modes OFF to save power */
					RF_Iddle;
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	92 e8       	ldi	r25, 0x82	; 130
 2b2:	dd de       	rcall	.-582    	; 0x6e <WriteCMD>

		    		/* Send start signal to front-end (PW0268) */	   	   		    
				    DDRA |= (1<<PA0);	// Configure PA0 as Output
 2b4:	d0 9a       	sbi	0x1a, 0	; 26
					PORTA &= ~(1<<PA0);	// Clear PA0
 2b6:	d8 98       	cbi	0x1b, 0	; 27
 2b8:	c8 01       	movw	r24, r16
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0xc0>
					_delay_us(1000);	
					PORTA |= (1<<PA0);	// Set PA0
 2be:	d8 9a       	sbi	0x1b, 0	; 27
					DDRA &= ~(1<<PA0);	// Configure PA0 as Input
 2c0:	d0 98       	cbi	0x1a, 0	; 26
			
					LED1_ON;			// RF received
 2c2:	d9 98       	cbi	0x1b, 1	; 27

					/* Wait for UG signal */
					TimeOutFlag = 0;
 2c4:	19 82       	std	Y+1, r1	; 0x01
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <main+0xd6>
					while(PINA&(1<<PA0))
					{
						if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
 2c8:	58 9b       	sbis	0x0b, 0	; 11
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <main+0xd6>
						{
							TimeOutFlag = 1;
 2cc:	b9 82       	std	Y+1, r11	; 0x01
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <main+0xda>
			
					LED1_ON;			// RF received

					/* Wait for UG signal */
					TimeOutFlag = 0;
					while(PINA&(1<<PA0))
 2d0:	c8 99       	sbic	0x19, 0	; 25
 2d2:	fa cf       	rjmp	.-12     	; 0x2c8 <main+0xce>
						{
							TimeOutFlag = 1;
							break;
						}
					}
					ToF = TCNT1/16;
 2d4:	8c b5       	in	r24, 0x2c	; 44
 2d6:	9d b5       	in	r25, 0x2d	; 45
 2d8:	74 e0       	ldi	r23, 0x04	; 4
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	7a 95       	dec	r23
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0xe0>
 2e2:	9b 83       	std	Y+3, r25	; 0x03
 2e4:	8a 83       	std	Y+2, r24	; 0x02
								
					/* Turn OFF PW0268 */
					PW0268_OFF;
 2e6:	c2 98       	cbi	0x18, 2	; 24

					/* Check TimeOutFlag */
					if (!TimeOutFlag)
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	88 23       	and	r24, r24
 2ec:	c9 f4       	brne	.+50     	; 0x320 <main+0x126>
					{
						LED2_ON;		// UG signal received
 2ee:	da 98       	cbi	0x1b, 2	; 27
					
						/* Wait for Timer1 Overflow Flag to ensure all RefPoints already received UG signal */
						if (!TimeOutFlag)
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	88 23       	and	r24, r24
 2f4:	11 f4       	brne	.+4      	; 0x2fa <main+0x100>
							{
								while( !(TIFR1&(1<<TOV1)) );
 2f6:	58 9b       	sbis	0x0b, 0	; 11
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <main+0xfc>
 2fa:	c8 01       	movw	r24, r16
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x102>
							}

						/* Send ToF to Host */
						_delay_us(RFTransmit_us*RefPointNr);
						RF_TXmode;
 300:	88 e3       	ldi	r24, 0x38	; 56
 302:	92 e8       	ldi	r25, 0x82	; 130
 304:	b4 de       	rcall	.-664    	; 0x6e <WriteCMD>
 306:	c7 01       	movw	r24, r14
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x10e>
						_delay_us(400);
						//ToF = 1234;
						RF12_Send(ToF);
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	9b 81       	ldd	r25, Y+3	; 0x03
 310:	03 df       	rcall	.-506    	; 0x118 <RF12_Send>
						LED1_ON;
 312:	d9 98       	cbi	0x1b, 1	; 27
 314:	c8 01       	movw	r24, r16
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0x11c>
						_delay_us(1000);
						RF_Iddle;
 31a:	88 e0       	ldi	r24, 0x08	; 8
 31c:	92 e8       	ldi	r25, 0x82	; 130
 31e:	a7 de       	rcall	.-690    	; 0x6e <WriteCMD>
					}
		  			LED1_OFF;
 320:	d9 9a       	sbi	0x1b, 1	; 27
		 			LED2_OFF;
 322:	da 9a       	sbi	0x1b, 2	; 27
				}
			}
			/* Restart the synchrony pattern recognition */
			RF_FIFORecog;
 324:	81 ef       	ldi	r24, 0xF1	; 241
 326:	9a ec       	ldi	r25, 0xCA	; 202
 328:	a2 de       	rcall	.-700    	; 0x6e <WriteCMD>
 32a:	83 ef       	ldi	r24, 0xF3	; 243
 32c:	9a ec       	ldi	r25, 0xCA	; 202
 32e:	9f de       	rcall	.-706    	; 0x6e <WriteCMD>
			RF_RXmode;
 330:	88 ed       	ldi	r24, 0xD8	; 216
 332:	92 e8       	ldi	r25, 0x82	; 130
 334:	9c de       	rcall	.-712    	; 0x6e <WriteCMD>
Timer1_init - restart Timer1
***************************************************************************/
void Timer1_init(void)
{
	/* Reset 16bit Timer1 for ToF measurements */
	TCCR1B=0;			// Stop Timer/Counter1
 336:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
 338:	58 9a       	sbi	0x0b, 0	; 11
	TCNT1=0;			// Reset Timer/Counter1
 33a:	1d bc       	out	0x2d, r1	; 45
 33c:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
 33e:	1f bc       	out	0x2f, r1	; 47
 340:	94 cf       	rjmp	.-216    	; 0x26a <main+0x70>

00000342 <GetParity>:
	LED2_OFF;
}


uint8_t GetParity(uint16_t x) 
{
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	04 c0       	rjmp	.+8      	; 0x34e <GetParity+0xc>
	uint8_t parity=0;
    
	while (x > 0) 
	{
       parity = (parity + (x & 1)) % 2;
 346:	28 0f       	add	r18, r24
 348:	21 70       	andi	r18, 0x01	; 1
       x >>= 1;
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24

uint8_t GetParity(uint16_t x) 
{
	uint8_t parity=0;
    
	while (x > 0) 
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	d1 f7       	brne	.-12     	; 0x346 <GetParity+0x4>
	{
       parity = (parity + (x & 1)) % 2;
       x >>= 1;
    }
	return parity;
}
 352:	82 2f       	mov	r24, r18
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
