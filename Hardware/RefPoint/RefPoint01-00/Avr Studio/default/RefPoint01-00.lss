
RefPoint01-00.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000036c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bc  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000717  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028d  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000066a  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000025d  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000334  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000180  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	ea d0       	rcall	.+468    	; 0x210 <main>
  3c:	5b c1       	rjmp	.+694    	; 0x2f4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <Timer1_int>:
Timer1_int - restart Timer1
***************************************************************************/
void Timer1_int(void)
{
	/* Reset 16bit Timer1 for ToF measurements */
	TCCR1B=0;			// Stop Timer/Counter1
  40:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
  42:	58 9a       	sbi	0x0b, 0	; 11
	TCNT1=0;			// Reset Timer/Counter1
  44:	1d bc       	out	0x2d, r1	; 45
  46:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
  48:	1f bc       	out	0x2f, r1	; 47
}
  4a:	08 95       	ret

0000004c <PORTS_int>:
PORTS_int - PORTS initialize
***************************************************************************/
void PORTS_int(void)
{
	/* Configure PW0268 Pin */
	PORTB &= ~(1<<PB2);	
  4c:	c2 98       	cbi	0x18, 2	; 24
	DDRB |= (1<<PB2);
  4e:	ba 9a       	sbi	0x17, 2	; 23
	
	/* Configure RF module pins */
	DDRA |= (1<<PA3) | (1<<PA4) | (1<<PA6);
  50:	8a b3       	in	r24, 0x1a	; 26
  52:	88 65       	ori	r24, 0x58	; 88
  54:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<SDO);
  56:	dd 9a       	sbi	0x1b, 5	; 27
	
	/* Configure LEDS Pins */
	DDRA |= (1<<PA1) | (1<<PA2);
  58:	8a b3       	in	r24, 0x1a	; 26
  5a:	86 60       	ori	r24, 0x06	; 6
  5c:	8a bb       	out	0x1a, r24	; 26

	PW0268_OFF;
  5e:	c2 98       	cbi	0x18, 2	; 24
	LED1_OFF;
  60:	d9 9a       	sbi	0x1b, 1	; 27
	LED2_OFF;
  62:	da 9a       	sbi	0x1b, 2	; 27
}
  64:	08 95       	ret

00000066 <WriteCMD>:
***************************************************************************/
void WriteCMD(unsigned int CMD)
{
	uint8_t n = 16;

	SCK_LOW;
  66:	dc 98       	cbi	0x1b, 4	; 27
	nSEL_LOW;
  68:	db 98       	cbi	0x1b, 3	; 27
  6a:	20 e1       	ldi	r18, 0x10	; 16
  6c:	09 c0       	rjmp	.+18     	; 0x80 <WriteCMD+0x1a>
	
	while(n--)
		{
		SCK_LOW;
  6e:	dc 98       	cbi	0x1b, 4	; 27

		if(CMD&0x8000)
  70:	97 ff       	sbrs	r25, 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <WriteCMD+0x12>
			SDI_HI;
  74:	de 9a       	sbi	0x1b, 6	; 27
  76:	01 c0       	rjmp	.+2      	; 0x7a <WriteCMD+0x14>
		else
			SDI_LOW;
  78:	de 98       	cbi	0x1b, 6	; 27

		SCK_HI;	
  7a:	dc 9a       	sbi	0x1b, 4	; 27
			
		CMD=CMD<<1;
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
	uint8_t n = 16;

	SCK_LOW;
	nSEL_LOW;
	
	while(n--)
  80:	21 50       	subi	r18, 0x01	; 1
  82:	a8 f7       	brcc	.-22     	; 0x6e <WriteCMD+0x8>
		SCK_HI;	
			
		CMD=CMD<<1;
		}

	SCK_LOW;
  84:	dc 98       	cbi	0x1b, 4	; 27
	nSEL_HI;
  86:	db 9a       	sbi	0x1b, 3	; 27
}
  88:	08 95       	ret

0000008a <RFM12_init>:
void RFM12_init(void)
{
	uint16_t Fcarr;

	/* Low Battery Detector and Micro controller Clock Divider Command: 10MHz output*/
	WriteCMD(0xC000 | (CLK10MHz<<5));
  8a:	80 ee       	ldi	r24, 0xE0	; 224
  8c:	90 ec       	ldi	r25, 0xC0	; 192
  8e:	eb df       	rcall	.-42     	; 0x66 <WriteCMD>
  90:	88 ee       	ldi	r24, 0xE8	; 232
  92:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	2a ef       	ldi	r18, 0xFA	; 250
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	f9 01       	movw	r30, r18
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <RFM12_init+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a0:	d9 f7       	brne	.-10     	; 0x98 <RFM12_init+0xe>
	_delay_ms(100);
	WriteCMD(0xC000 | (CLK10MHz<<5));
  a2:	80 ee       	ldi	r24, 0xE0	; 224
  a4:	90 ec       	ldi	r25, 0xC0	; 192
  a6:	df df       	rcall	.-66     	; 0x66 <WriteCMD>
  a8:	88 ee       	ldi	r24, 0xE8	; 232
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	2a ef       	ldi	r18, 0xFA	; 250
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	f9 01       	movw	r30, r18
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <RFM12_init+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <RFM12_init+0x26>
	_delay_ms(100);

	/* Configuration Setting Command  */
	WriteCMD(0x80DF);	// 433MHz Band; Enable TX registere; Enable RX FIFO buffer, 16pF
  ba:	8f ed       	ldi	r24, 0xDF	; 223
  bc:	90 e8       	ldi	r25, 0x80	; 128
  be:	d3 df       	rcall	.-90     	; 0x66 <WriteCMD>
	
	/* Frequency Setting Command: F carrier = 439.00MHz */
	Fcarr = Fc(439.00);
	WriteCMD(0xA000|Fcarr);
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	9e ea       	ldi	r25, 0xAE	; 174
  c4:	d0 df       	rcall	.-96     	; 0x66 <WriteCMD>

	/* Data Rate Command: 114.943kbps */
	WriteCMD(0xC600|BR114_943kbs);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	96 ec       	ldi	r25, 0xC6	; 198
  ca:	cd df       	rcall	.-102    	; 0x66 <WriteCMD>

	/* Receiver Control Command */
	WriteCMD(0x9420);	// VDI, FAST, Bandwidth 400kHz, LNA gain 0dBm, -103dBm
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	94 e9       	ldi	r25, 0x94	; 148
  d0:	ca df       	rcall	.-108    	; 0x66 <WriteCMD>

	/* Data Filter Command */
	WriteCMD(0xC2AC);	// Auto-lock; Digital filter;
  d2:	8c ea       	ldi	r24, 0xAC	; 172
  d4:	92 ec       	ldi	r25, 0xC2	; 194
  d6:	c7 df       	rcall	.-114    	; 0x66 <WriteCMD>
	
	/* FIFO and Reset Mode Command */
	WriteCMD(0xCAF3);	// FIFO interrupt level: 16bits; FIFO fill start condition: Sync-word; Enable FIFO fill; dr - set to "1"
  d8:	83 ef       	ldi	r24, 0xF3	; 243
  da:	9a ec       	ldi	r25, 0xCA	; 202
  dc:	c4 df       	rcall	.-120    	; 0x66 <WriteCMD>
	
	/* AFC Command */
	WriteCMD(0xC49B);	// AFC setting: Keep offset when VDI hi; select range limit +15/-16; Enable AFC funcition; st,oe - set to "1"
  de:	8b e9       	ldi	r24, 0x9B	; 155
  e0:	94 ec       	ldi	r25, 0xC4	; 196
  e2:	c1 df       	rcall	.-126    	; 0x66 <WriteCMD>
	
	/* TX Configuration Control Command */
	WriteCMD(0x98D0);	// 210kHz deviation; MAX OUT
  e4:	80 ed       	ldi	r24, 0xD0	; 208
  e6:	98 e9       	ldi	r25, 0x98	; 152
  e8:	be df       	rcall	.-132    	; 0x66 <WriteCMD>

	/* Power Management Command */
	RF_Iddle;
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	92 e8       	ldi	r25, 0x82	; 130
  ee:	bb df       	rcall	.-138    	; 0x66 <WriteCMD>
}
  f0:	08 95       	ret

000000f2 <Write_FSK_byte>:

/***************************************************************************
Write_FSK_byte - Write FSK 8bit data
***************************************************************************/
void Write_FSK_byte(uint8_t data)
{
  f2:	98 2f       	mov	r25, r24
	uint16_t CMD = 0xB800;
	uint8_t RGIT = 0;
	
	/* Wait for previous data latch */
	do{
		SCK_LOW;
  f4:	dc 98       	cbi	0x1b, 4	; 27
		nSEL_LOW;
  f6:	db 98       	cbi	0x1b, 3	; 27
		SDI_LOW;
  f8:	de 98       	cbi	0x1b, 6	; 27
		SCK_HI;
  fa:	dc 9a       	sbi	0x1b, 4	; 27
		
		if(SDO_PIN)
  fc:	89 b3       	in	r24, 0x19	; 25
			RGIT=1;		

		SCK_LOW;
  fe:	dc 98       	cbi	0x1b, 4	; 27
		SDI_HI;
 100:	de 9a       	sbi	0x1b, 6	; 27
		nSEL_HI;
 102:	db 9a       	sbi	0x1b, 3	; 27
		}while(!RGIT);
 104:	85 ff       	sbrs	r24, 5
 106:	f6 cf       	rjmp	.-20     	; 0xf4 <Write_FSK_byte+0x2>

	/* Transmitter Register Write Command */
	WriteCMD(CMD|data);
 108:	89 2f       	mov	r24, r25
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	98 6b       	ori	r25, 0xB8	; 184
 10e:	ab df       	rcall	.-170    	; 0x66 <WriteCMD>
}
 110:	08 95       	ret

00000112 <RMFM12_send>:

/***************************************************************************
RMFM12_send - Send FSK data 
***************************************************************************/
void RMFM12_send(uint16_t data)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	/* RF packet [0xAA 0xAA 0xAA 0x2D 0xD4 Data_MSB Data_LSB] */
	Write_FSK_byte(0xAA);		// Send Preamble
 118:	8a ea       	ldi	r24, 0xAA	; 170
 11a:	eb df       	rcall	.-42     	; 0xf2 <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 11c:	8a ea       	ldi	r24, 0xAA	; 170
 11e:	e9 df       	rcall	.-46     	; 0xf2 <Write_FSK_byte>
	Write_FSK_byte(0xAA);		// Send Preamble
 120:	8a ea       	ldi	r24, 0xAA	; 170
 122:	e7 df       	rcall	.-50     	; 0xf2 <Write_FSK_byte>
	Write_FSK_byte(0x2D);		// Send sync word
 124:	8d e2       	ldi	r24, 0x2D	; 45
 126:	e5 df       	rcall	.-54     	; 0xf2 <Write_FSK_byte>
	Write_FSK_byte(0xD4);		// Send sync word
 128:	84 ed       	ldi	r24, 0xD4	; 212
 12a:	e3 df       	rcall	.-58     	; 0xf2 <Write_FSK_byte>
	Write_FSK_byte(data>>8);	// Send Data
 12c:	81 2f       	mov	r24, r17
 12e:	e1 df       	rcall	.-62     	; 0xf2 <Write_FSK_byte>
	Write_FSK_byte(data&0xFF);	// Send Data
 130:	80 2f       	mov	r24, r16
 132:	df df       	rcall	.-66     	; 0xf2 <Write_FSK_byte>
}
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <RFTransmit_packet>:

/***************************************************************************
RFTransmit_packet - Transmit data to RF
***************************************************************************/
void RFTransmit_packet(uint8_t RefNr, uint16_t Value)
{
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	f8 2e       	mov	r15, r24
 142:	8b 01       	movw	r16, r22
	/* Prepare 16bit packet */
	packet|=(RefNr&0x07)<<13;	// RefNr 3 bits
	packet|=(Value&0x1FFF);		// Value 13 bits
	
	/* Send 16bit packet */
	RF_TXmode;
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	92 e8       	ldi	r25, 0x82	; 130
 148:	8e df       	rcall	.-228    	; 0x66 <WriteCMD>
 14a:	8a ef       	ldi	r24, 0xFA	; 250
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <RFTransmit_packet+0x14>
	_delay_us(100);
	RMFM12_send(packet);
 152:	9f 2d       	mov	r25, r15
 154:	92 95       	swap	r25
 156:	99 0f       	add	r25, r25
 158:	90 7e       	andi	r25, 0xE0	; 224
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	1f 71       	andi	r17, 0x1F	; 31
 15e:	80 2b       	or	r24, r16
 160:	91 2b       	or	r25, r17
 162:	d7 df       	rcall	.-82     	; 0x112 <RMFM12_send>
 164:	82 ee       	ldi	r24, 0xE2	; 226
 166:	94 e0       	ldi	r25, 0x04	; 4
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <RFTransmit_packet+0x2e>
	_delay_us(500);
	RF_Iddle;
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	92 e8       	ldi	r25, 0x82	; 130
 170:	7a df       	rcall	.-268    	; 0x66 <WriteCMD>
}
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	08 95       	ret

0000017a <RMFM12_readFIFO>:
***************************************************************************/
uint16_t RMFM12_readFIFO(void)
{
	uint16_t Result=0;

	SCK_LOW;
 17a:	dc 98       	cbi	0x1b, 4	; 27
	SDI_LOW;
 17c:	de 98       	cbi	0x1b, 6	; 27
	nSEL_LOW;
 17e:	db 98       	cbi	0x1b, 3	; 27
 180:	80 e0       	ldi	r24, 0x00	; 0

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
		{ 
		SCK_HI;
 182:	dc 9a       	sbi	0x1b, 4	; 27
		SCK_LOW;
 184:	dc 98       	cbi	0x1b, 4	; 27
	SCK_LOW;
	SDI_LOW;
	nSEL_LOW;

	/* Skip status bits */
	for(uint8_t i=0;i<16;i++)	
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 31       	cpi	r24, 0x10	; 16
 18a:	d9 f7       	brne	.-10     	; 0x182 <RMFM12_readFIFO+0x8>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
		{ 
		Result = Result<<1;
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
		
		if(SDO_PIN)
 196:	cd 99       	sbic	0x19, 5	; 25
			Result|=1;
 198:	21 60       	ori	r18, 0x01	; 1

		SCK_HI;
 19a:	dc 9a       	sbi	0x1b, 4	; 27
		SCK_LOW;
 19c:	dc 98       	cbi	0x1b, 4	; 27
		SCK_HI;
		SCK_LOW;
		}

	/* Read Fifo Data byte */
	for(uint8_t i=0;i<16;i++)	
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 31       	cpi	r24, 0x10	; 16
 1a2:	b9 f7       	brne	.-18     	; 0x192 <RMFM12_readFIFO+0x18>

		SCK_HI;
		SCK_LOW;
		}

	nSEL_HI;
 1a4:	db 9a       	sbi	0x1b, 3	; 27

	return(Result);
}
 1a6:	c9 01       	movw	r24, r18
 1a8:	08 95       	ret

000001aa <BlinkNumber>:
/***************************************************************************
BlinkNumber - 
***************************************************************************/
void BlinkNumber(uint8_t RefNr)
{
	LED2_ON;
 1aa:	da 98       	cbi	0x1b, 2	; 27
	LED1_OFF;
 1ac:	d9 9a       	sbi	0x1b, 1	; 27
 1ae:	28 e8       	ldi	r18, 0x88	; 136
 1b0:	33 e1       	ldi	r19, 0x13	; 19
 1b2:	4a ef       	ldi	r20, 0xFA	; 250
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	fa 01       	movw	r30, r20
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <BlinkNumber+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c0:	d1 f7       	brne	.-12     	; 0x1b6 <BlinkNumber+0xc>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	4a ef       	ldi	r20, 0xFA	; 250
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <BlinkNumber+0x46>
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
	{
		LED1_ON;
 1ca:	d9 98       	cbi	0x1b, 1	; 27
 1cc:	24 ec       	ldi	r18, 0xC4	; 196
 1ce:	39 e0       	ldi	r19, 0x09	; 9
 1d0:	fa 01       	movw	r30, r20
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <BlinkNumber+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	d1 f7       	brne	.-12     	; 0x1d0 <BlinkNumber+0x26>
		_delay_ms(250);
		LED1_OFF;
 1dc:	d9 9a       	sbi	0x1b, 1	; 27
 1de:	24 ec       	ldi	r18, 0xC4	; 196
 1e0:	39 e0       	ldi	r19, 0x09	; 9
 1e2:	fa 01       	movw	r30, r20
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <BlinkNumber+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d1 f7       	brne	.-12     	; 0x1e2 <BlinkNumber+0x38>
{
	LED2_ON;
	LED1_OFF;
	_delay_ms(500);

	for (uint8_t i=0;i<RefNr;i++)
 1ee:	9f 5f       	subi	r25, 0xFF	; 255
 1f0:	98 17       	cp	r25, r24
 1f2:	58 f3       	brcs	.-42     	; 0x1ca <BlinkNumber+0x20>
		LED1_ON;
		_delay_ms(250);
		LED1_OFF;
		_delay_ms(250);
	}
	if (RefNr==0)
 1f4:	88 23       	and	r24, r24
 1f6:	49 f4       	brne	.+18     	; 0x20a <BlinkNumber+0x60>
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	97 e2       	ldi	r25, 0x27	; 39
 1fc:	2a ef       	ldi	r18, 0xFA	; 250
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <BlinkNumber+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 208:	d9 f7       	brne	.-10     	; 0x200 <BlinkNumber+0x56>
		_delay_ms(1000);
	
	LED1_OFF;
 20a:	d9 9a       	sbi	0x1b, 1	; 27
	LED2_OFF;
 20c:	da 9a       	sbi	0x1b, 2	; 27
}
 20e:	08 95       	ret

00000210 <main>:
***************************************************************************/
volatile uint16_t laikas;


int main(void)
{
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	88 ee       	ldi	r24, 0xE8	; 232
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	2a ef       	ldi	r18, 0xFA	; 250
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22c:	d9 f7       	brne	.-10     	; 0x224 <main+0x14>
	uint8_t TimeOutFlag;

	/* Wait for Vcc stabilize */
	_delay_ms(100);

	PORTS_int();
 22e:	0e df       	rcall	.-484    	; 0x4c <PORTS_int>
	RFM12_init();
 230:	2c df       	rcall	.-424    	; 0x8a <RFM12_init>
Timer1_int - restart Timer1
***************************************************************************/
void Timer1_int(void)
{
	/* Reset 16bit Timer1 for ToF measurements */
	TCCR1B=0;			// Stop Timer/Counter1
 232:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
 234:	58 9a       	sbi	0x0b, 0	; 11
	TCNT1=0;			// Reset Timer/Counter1
 236:	1d bc       	out	0x2d, r1	; 45
 238:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
 23a:	1f bc       	out	0x2f, r1	; 47
	_delay_ms(100);

	PORTS_int();
	RFM12_init();
	Timer1_int();
	BlinkNumber(RefPointNr);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	b5 df       	rcall	.-150    	; 0x1aa <BlinkNumber>

	RF_FIFORecog;
 240:	80 ef       	ldi	r24, 0xF0	; 240
 242:	9a ec       	ldi	r25, 0xCA	; 202
 244:	10 df       	rcall	.-480    	; 0x66 <WriteCMD>
 246:	83 ef       	ldi	r24, 0xF3	; 243
 248:	9a ec       	ldi	r25, 0xCA	; 202
 24a:	0d df       	rcall	.-486    	; 0x66 <WriteCMD>
	RF_RXmode;
 24c:	88 ed       	ldi	r24, 0xD8	; 216
 24e:	92 e8       	ldi	r25, 0x82	; 130
 250:	0a df       	rcall	.-492    	; 0x66 <WriteCMD>
	{
		/* Wait for interrupt from RFM12 (received Data) */
		if(!nIRQ_PIN)	
		{
			/* Start 16bit Timer1 immediately for ToF measurements */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 252:	72 e0       	ldi	r23, 0x02	; 2
 254:	e7 2e       	mov	r14, r23
 256:	0e ee       	ldi	r16, 0xEE	; 238
 258:	12 e0       	ldi	r17, 0x02	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 25a:	66 ea       	ldi	r22, 0xA6	; 166
 25c:	f6 2e       	mov	r15, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25e:	c8 e2       	ldi	r28, 0x28	; 40
 260:	d3 e2       	ldi	r29, 0x23	; 35
	RF_RXmode;

	while(1)
	{
		/* Wait for interrupt from RFM12 (received Data) */
		if(!nIRQ_PIN)	
 262:	cf 99       	sbic	0x19, 7	; 25
 264:	fe cf       	rjmp	.-4      	; 0x262 <main+0x52>
		{
			/* Start 16bit Timer1 immediately for ToF measurements */
			TCCR1B=1<<CS11;		// clk div 8, start (tres=0.8us, tmax=52,43ms, Lres=0,27mm, Lmax=17,83m c=340m/s)
 266:	ee bc       	out	0x2e, r14	; 46

			/* Check received data */
			if(RMFM12_readFIFO() == RF_StartCode)
 268:	88 df       	rcall	.-240    	; 0x17a <RMFM12_readFIFO>
 26a:	84 55       	subi	r24, 0x54	; 84
 26c:	94 41       	sbci	r25, 0x14	; 20
 26e:	99 f5       	brne	.+102    	; 0x2d6 <main+0xc6>
			{
				/* Turn ON PW0268 */
				PW0268_ON;
 270:	c2 9a       	sbi	0x18, 2	; 24
 272:	c8 01       	movw	r24, r16
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x64>
				_delay_us(300);
				
				/* RF Transmitter/Receiver modes OFF to save power */
				RF_Iddle;
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	92 e8       	ldi	r25, 0x82	; 130
 27c:	f4 de       	rcall	.-536    	; 0x66 <WriteCMD>

	    		/* Send start signal to front-end (PW0268) */	   	   		    
			    DDRA |= (1<<PA0);	// Configure PA0 as Output
 27e:	d0 9a       	sbi	0x1a, 0	; 26
				PORTA &= ~(1<<PA0);	// Clear PA0
 280:	d8 98       	cbi	0x1b, 0	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 282:	8f 2d       	mov	r24, r15
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x74>
				_delay_us(50);	
				PORTA |= (1<<PA0);	// Set PA0
 288:	d8 9a       	sbi	0x1b, 0	; 27
				DDRA &= ~(1<<PA0);	// Configure PA0 as Input
 28a:	d0 98       	cbi	0x1a, 0	; 26
			
				LED1_ON;			// RF received
 28c:	d9 98       	cbi	0x1b, 1	; 27
 28e:	04 c0       	rjmp	.+8      	; 0x298 <main+0x88>

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
				{
					if (TIFR1&(1<<TOV1))	// Check for Overflow Flag
 290:	58 9b       	sbis	0x0b, 0	; 11
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x88>
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	03 c0       	rjmp	.+6      	; 0x29e <main+0x8e>
			
				LED1_ON;			// RF received

				/* Wait for UG signal */
				TimeOutFlag=0;
				while(PINA&(1<<PA0))
 298:	c8 99       	sbic	0x19, 0	; 25
 29a:	fa cf       	rjmp	.-12     	; 0x290 <main+0x80>
 29c:	20 e0       	ldi	r18, 0x00	; 0
					{
						TimeOutFlag = 1;
						break;
					}
				}
				laikas=TCNT1/8;	// reduce bits number to 13bits (tres2=6.4us, Lres2=2.18mm)
 29e:	8c b5       	in	r24, 0x2c	; 44
 2a0:	9d b5       	in	r25, 0x2d	; 45
 2a2:	53 e0       	ldi	r21, 0x03	; 3
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	5a 95       	dec	r21
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x94>
 2ac:	90 93 61 00 	sts	0x0061, r25
 2b0:	80 93 60 00 	sts	0x0060, r24
								
				/* Turn OFF PW0268 */
				PW0268_OFF;
 2b4:	c2 98       	cbi	0x18, 2	; 24

				/* Check TimeOutFlag */
				if (!TimeOutFlag)
 2b6:	22 23       	and	r18, r18
 2b8:	61 f4       	brne	.+24     	; 0x2d2 <main+0xc2>
				{
					LED2_ON;		// UG signal received
 2ba:	da 98       	cbi	0x1b, 2	; 27
					
					/* Wait for Timer1 Overflow Flag to ensure all RefPoints already received UG signal */
					while( !(TIFR1&(1<<TOV1)) );
 2bc:	58 9b       	sbis	0x0b, 0	; 11
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <main+0xac>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0xb2>

					/* Send ToF to Host */
					_delay_us(RFTransmit_us*RefPointNr);
					RFTransmit_packet(RefPointNr,laikas);
 2c6:	60 91 60 00 	lds	r22, 0x0060
 2ca:	70 91 61 00 	lds	r23, 0x0061
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	34 df       	rcall	.-408    	; 0x13a <RFTransmit_packet>
				}
	  			LED1_OFF;
 2d2:	d9 9a       	sbi	0x1b, 1	; 27
	 			LED2_OFF;
 2d4:	da 9a       	sbi	0x1b, 2	; 27
Timer1_int - restart Timer1
***************************************************************************/
void Timer1_int(void)
{
	/* Reset 16bit Timer1 for ToF measurements */
	TCCR1B=0;			// Stop Timer/Counter1
 2d6:	1e bc       	out	0x2e, r1	; 46
	TIFR1|=(1<<TOV1); 	// Clear Overflow Flag
 2d8:	58 9a       	sbi	0x0b, 0	; 11
	TCNT1=0;			// Reset Timer/Counter1
 2da:	1d bc       	out	0x2d, r1	; 45
 2dc:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0;			// Normal mode
 2de:	1f bc       	out	0x2f, r1	; 47

		/* Restart Timer1 Configuration */
		Timer1_int();

		/* Restart the synchrony pattern recognition */
		RF_FIFORecog;
 2e0:	80 ef       	ldi	r24, 0xF0	; 240
 2e2:	9a ec       	ldi	r25, 0xCA	; 202
 2e4:	c0 de       	rcall	.-640    	; 0x66 <WriteCMD>
 2e6:	83 ef       	ldi	r24, 0xF3	; 243
 2e8:	9a ec       	ldi	r25, 0xCA	; 202
 2ea:	bd de       	rcall	.-646    	; 0x66 <WriteCMD>
		RF_RXmode;		
 2ec:	88 ed       	ldi	r24, 0xD8	; 216
 2ee:	92 e8       	ldi	r25, 0x82	; 130
 2f0:	ba de       	rcall	.-652    	; 0x66 <WriteCMD>
 2f2:	b7 cf       	rjmp	.-146    	; 0x262 <main+0x52>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
