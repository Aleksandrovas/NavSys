
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000ad  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000030c  00000000  00000000  00000319  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001bc  00000000  00000000  00000625  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000476  00000000  00000000  000007e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000159  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c4  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	ae c0       	rjmp	.+348    	; 0x164 <__vector_3>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	b6 d0       	rcall	.+364    	; 0x198 <main>
  2c:	e3 c0       	rjmp	.+454    	; 0x1f4 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <PORTS_int>:
/***********************************
PORTS initialise
***********************************/
void PORTS_int(void)
{
	DDRA |= (1<<PA0) | (1<<PA1);
  30:	8a b3       	in	r24, 0x1a	; 26
  32:	83 60       	ori	r24, 0x03	; 3
  34:	8a bb       	out	0x1a, r24	; 26
}
  36:	08 95       	ret

00000038 <WriteCMD>:
*************************************/
void WriteCMD(unsigned int CMD)
{
	unsigned char n = 16;

	nSEL_LOW;
  38:	c1 98       	cbi	0x18, 1	; 24
  3a:	20 e1       	ldi	r18, 0x10	; 16
  3c:	09 c0       	rjmp	.+18     	; 0x50 <__SREG__+0x11>
	
	while(n--)
		{
		SCK_LOW;
  3e:	c2 98       	cbi	0x18, 2	; 24

		if(CMD&0x8000)
  40:	97 ff       	sbrs	r25, 7
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
			SDI_HI;
  44:	df 9a       	sbi	0x1b, 7	; 27
  46:	01 c0       	rjmp	.+2      	; 0x4a <__SREG__+0xb>

		else
			SDI_LOW;
  48:	df 98       	cbi	0x1b, 7	; 27

		SCK_HI;	
  4a:	c2 9a       	sbi	0x18, 2	; 24
			
		CMD = CMD<<1;
  4c:	88 0f       	add	r24, r24
  4e:	99 1f       	adc	r25, r25
{
	unsigned char n = 16;

	nSEL_LOW;
	
	while(n--)
  50:	21 50       	subi	r18, 0x01	; 1
  52:	a8 f7       	brcc	.-22     	; 0x3e <__SP_H__>
		SCK_HI;	
			
		CMD = CMD<<1;
		}

	SCK_LOW;
  54:	c2 98       	cbi	0x18, 2	; 24
	nSEL_HI;
  56:	c1 9a       	sbi	0x18, 1	; 24
}
  58:	08 95       	ret

0000005a <Write_FSK_byte>:

/**************************************
Write FSK data
**************************************/
void Write_FSK_byte(unsigned char data)
{
  5a:	98 e0       	ldi	r25, 0x08	; 8
  5c:	0a c0       	rjmp	.+20     	; 0x72 <Write_FSK_byte+0x18>
	unsigned char n = 8;

	while(n--)
		{
		while(nIRQ_PIN);	
  5e:	ca 99       	sbic	0x19, 2	; 25
  60:	fe cf       	rjmp	.-4      	; 0x5e <Write_FSK_byte+0x4>
		while(!nIRQ_PIN);
  62:	ca 9b       	sbis	0x19, 2	; 25
  64:	fe cf       	rjmp	.-4      	; 0x62 <Write_FSK_byte+0x8>

		if(data&0x80)
  66:	87 ff       	sbrs	r24, 7
  68:	02 c0       	rjmp	.+4      	; 0x6e <Write_FSK_byte+0x14>
			SDI_HI;
  6a:	df 9a       	sbi	0x1b, 7	; 27
  6c:	01 c0       	rjmp	.+2      	; 0x70 <Write_FSK_byte+0x16>
		else
			SDI_LOW;
  6e:	df 98       	cbi	0x1b, 7	; 27

		data = data<<1;
  70:	88 0f       	add	r24, r24
**************************************/
void Write_FSK_byte(unsigned char data)
{
	unsigned char n = 8;

	while(n--)
  72:	91 50       	subi	r25, 0x01	; 1
  74:	a0 f7       	brcc	.-24     	; 0x5e <Write_FSK_byte+0x4>
		else
			SDI_LOW;

		data = data<<1;
		}
}
  76:	08 95       	ret

00000078 <Write_FSK_word>:

/**************************************
Write FSK data
**************************************/
void Write_FSK_word(unsigned short data)
{
  78:	2f e0       	ldi	r18, 0x0F	; 15
  7a:	0b c0       	rjmp	.+22     	; 0x92 <Write_FSK_word+0x1a>
	unsigned char n = 15;

	while(n--)
		{
		while(nIRQ_PIN);	
  7c:	ca 99       	sbic	0x19, 2	; 25
  7e:	fe cf       	rjmp	.-4      	; 0x7c <Write_FSK_word+0x4>
		while(!nIRQ_PIN);
  80:	ca 9b       	sbis	0x19, 2	; 25
  82:	fe cf       	rjmp	.-4      	; 0x80 <Write_FSK_word+0x8>

		if(data&0x8000)
  84:	97 ff       	sbrs	r25, 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <Write_FSK_word+0x14>
			SDI_HI;
  88:	df 9a       	sbi	0x1b, 7	; 27
  8a:	01 c0       	rjmp	.+2      	; 0x8e <Write_FSK_word+0x16>
		else
			SDI_LOW;
  8c:	df 98       	cbi	0x1b, 7	; 27

		data = data<<1;
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
**************************************/
void Write_FSK_word(unsigned short data)
{
	unsigned char n = 15;

	while(n--)
  92:	21 50       	subi	r18, 0x01	; 1
  94:	98 f7       	brcc	.-26     	; 0x7c <Write_FSK_word+0x4>
		else
			SDI_LOW;

		data = data<<1;
		}
}
  96:	08 95       	ret

00000098 <RMFM02_send>:

/**************************************
Send FSK data
**************************************/
void RMFM02_send(unsigned short data)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	ec 01       	movw	r28, r24
	unsigned char n = 8;
	unsigned char CMD = 0xC6;

	nSEL_LOW;
  9e:	c1 98       	cbi	0x18, 1	; 24
  a0:	98 e0       	ldi	r25, 0x08	; 8
  a2:	86 ec       	ldi	r24, 0xC6	; 198
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <RMFM02_send+0x1e>

	while(n--)
		{
		SCK_LOW;
  a6:	c2 98       	cbi	0x18, 2	; 24

		if(CMD&0x80)
  a8:	87 ff       	sbrs	r24, 7
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <RMFM02_send+0x18>
			SDI_HI;
  ac:	df 9a       	sbi	0x1b, 7	; 27
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <RMFM02_send+0x1a>
		else
			SDI_LOW;
  b0:	df 98       	cbi	0x1b, 7	; 27

		SCK_HI;	
  b2:	c2 9a       	sbi	0x18, 2	; 24
			
		CMD = CMD<<1;
  b4:	88 0f       	add	r24, r24
	unsigned char n = 8;
	unsigned char CMD = 0xC6;

	nSEL_LOW;

	while(n--)
  b6:	91 50       	subi	r25, 0x01	; 1
  b8:	b0 f7       	brcc	.-20     	; 0xa6 <RMFM02_send+0xe>
		SCK_HI;	
			
		CMD = CMD<<1;
		}

	SCK_LOW;
  ba:	c2 98       	cbi	0x18, 2	; 24
LED1_ON;
  bc:	d8 98       	cbi	0x1b, 0	; 27
	Write_FSK_byte(0xAA);	// Send Preamble
  be:	8a ea       	ldi	r24, 0xAA	; 170
  c0:	cc df       	rcall	.-104    	; 0x5a <Write_FSK_byte>
	Write_FSK_byte(0xAA);	// Send Preamble
  c2:	8a ea       	ldi	r24, 0xAA	; 170
  c4:	ca df       	rcall	.-108    	; 0x5a <Write_FSK_byte>
	Write_FSK_byte(0xAA);	// Send Preamble
  c6:	8a ea       	ldi	r24, 0xAA	; 170
  c8:	c8 df       	rcall	.-112    	; 0x5a <Write_FSK_byte>

	Write_FSK_byte(0x2D);	// Send sync word
  ca:	8d e2       	ldi	r24, 0x2D	; 45
  cc:	c6 df       	rcall	.-116    	; 0x5a <Write_FSK_byte>
	Write_FSK_byte(0xD4);	// Send sync word
  ce:	84 ed       	ldi	r24, 0xD4	; 212
  d0:	c4 df       	rcall	.-120    	; 0x5a <Write_FSK_byte>
	
	Write_FSK_word(data);	
  d2:	ce 01       	movw	r24, r28
  d4:	d1 df       	rcall	.-94     	; 0x78 <Write_FSK_word>

					// Indicate end of data transmition.

	nSEL_HI;
  d6:	c1 9a       	sbi	0x18, 1	; 24

	while(nIRQ_PIN);		// wait until transfer done
  d8:	ca 99       	sbic	0x19, 2	; 25
  da:	fe cf       	rjmp	.-4      	; 0xd8 <RMFM02_send+0x40>

//	Sleep_TX;
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <RFM02_init>:
*************************************/
void RFM02_init(void)
{
	unsigned int F;

	PORTB |= (1<<nSEL);
  e2:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1<<SCK) | (1<<nSEL);  
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	87 bb       	out	0x17, r24	; 23
	DDRA |= (1<<SDI);
  ea:	d7 9a       	sbi	0x1a, 7	; 26

	WriteCMD(0x8FF6);			// 433MHz band, +/-210kHz, CLK 10MHz, 16pF.	
  ec:	86 ef       	ldi	r24, 0xF6	; 246
  ee:	9f e8       	ldi	r25, 0x8F	; 143
  f0:	a3 df       	rcall	.-186    	; 0x38 <WriteCMD>
	asm("nop");					// Wait for clock stabilize
  f2:	00 00       	nop

	F = Fc(439.00);				// 2.5kHz step (430.0975MHz - 439.7575MHz).
	WriteCMD(0xA000|F);			// Fcarrier = 433.00MHz		
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	9e ea       	ldi	r25, 0xAE	; 174
  f8:	9f df       	rcall	.-194    	; 0x38 <WriteCMD>
	WriteCMD(0xC829);			// 114.94Kbps
  fa:	89 e2       	ldi	r24, 0x29	; 41
  fc:	98 ec       	ldi	r25, 0xC8	; 200
  fe:	9c df       	rcall	.-200    	; 0x38 <WriteCMD>
	WriteCMD(0xD282);			// Set PLL bandwidth, dr - set to "1".
 100:	82 e8       	ldi	r24, 0x82	; 130
 102:	92 ed       	ldi	r25, 0xD2	; 210
 104:	99 df       	rcall	.-206    	; 0x38 <WriteCMD>
	WriteCMD(0xC2A8);			// ENABLE BIT SYNC ,dwc - set to "1".
 106:	88 ea       	ldi	r24, 0xA8	; 168
 108:	92 ec       	ldi	r25, 0xC2	; 194
 10a:	96 df       	rcall	.-212    	; 0x38 <WriteCMD>
	// Pout = Pmax = 7dBm
	WriteCMD(0xC0E0);			// a0,a1,ex - set to "1".	
 10c:	80 ee       	ldi	r24, 0xE0	; 224
 10e:	90 ec       	ldi	r25, 0xC0	; 192
 110:	93 df       	rcall	.-218    	; 0x38 <WriteCMD>
}
 112:	08 95       	ret

00000114 <init_Ug>:
/**************************************
Initialise Ug 
**************************************/
void init_Ug()
{
	DDRA |= (1<<PA5) | (1<<PA6);
 114:	8a b3       	in	r24, 0x1a	; 26
 116:	80 66       	ori	r24, 0x60	; 96
 118:	8a bb       	out	0x1a, r24	; 26
}
 11a:	08 95       	ret

0000011c <send_Ug>:

/**************************************
Send Ug signals
**************************************/
void send_Ug(unsigned char n)
{
 11c:	28 2f       	mov	r18, r24
	unsigned char i=0;
	TIFR1=0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8b b9       	out	0x0b, r24	; 11
	TCNT1=0;
 122:	1d bc       	out	0x2d, r1	; 45
 124:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 124;		// Top(12.5us)
 126:	8c e7       	ldi	r24, 0x7C	; 124
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	95 bd       	out	0x25, r25	; 37
 12c:	84 bd       	out	0x24, r24	; 36
	OCR1A = 59;		// 6us
 12e:	8b e3       	ldi	r24, 0x3B	; 59
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9b bd       	out	0x2b, r25	; 43
 134:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 64;		// 6.5us
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	99 bd       	out	0x29, r25	; 41
 13c:	88 bd       	out	0x28, r24	; 40
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<COM1B0);
 13e:	80 eb       	ldi	r24, 0xB0	; 176
 140:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13);		// Fcpu/1, start Timer/Counter1.
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS10) ;		
 146:	8e b5       	in	r24, 0x2e	; 46
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	8e bd       	out	0x2e, r24	; 46
	LED2_ON;
 14c:	d9 98       	cbi	0x1b, 1	; 27
 14e:	80 e0       	ldi	r24, 0x00	; 0

	while(i<=n)
	{
		if ((TIFR1&(1<<TOV1))==(1<<TOV1))
 150:	58 9b       	sbis	0x0b, 0	; 11
 152:	fe cf       	rjmp	.-4      	; 0x150 <send_Ug+0x34>
		{
			TIFR1|=1<<TOV1;
 154:	58 9a       	sbi	0x0b, 0	; 11
			i++;
 156:	8f 5f       	subi	r24, 0xFF	; 255
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<COM1B0);
	TCCR1B = (1<<WGM13);		// Fcpu/1, start Timer/Counter1.
	TCCR1B |= (1<<CS10) ;		
	LED2_ON;

	while(i<=n)
 158:	28 17       	cp	r18, r24
 15a:	d0 f7       	brcc	.-12     	; 0x150 <send_Ug+0x34>
		{
			TIFR1|=1<<TOV1;
			i++;
		}
	}
	TCCR1B = 0;
 15c:	1e bc       	out	0x2e, r1	; 46
	TCCR1A = 0;
 15e:	1f bc       	out	0x2f, r1	; 47
	PORTA &= ~(1<<PA5);
 160:	dd 98       	cbi	0x1b, 5	; 27
}
 162:	08 95       	ret

00000164 <__vector_3>:

/************************************
Interupt service
*************************************/
ISR(PCINT1_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
//	sleep_disable();
//	cli();			// disable interupt
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <parity>:

//parity bito skaiciavimo paprograme
unsigned char parity(unsigned short word)
{
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char count=1;
	unsigned short i;
	for (i=1;i<16;i++)
	{
		if ((word&1)==1)
 17e:	80 fd       	sbrc	r24, 0
			count++;
 180:	4f 5f       	subi	r20, 0xFF	; 255
//parity bito skaiciavimo paprograme
unsigned char parity(unsigned short word)
{
	unsigned char count=1;
	unsigned short i;
	for (i=1;i<16;i++)
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	20 31       	cpi	r18, 0x10	; 16
 188:	31 05       	cpc	r19, r1
 18a:	19 f0       	breq	.+6      	; 0x192 <parity+0x1a>
	{
		if ((word&1)==1)
			count++;
		word>>=1;
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	f6 cf       	rjmp	.-20     	; 0x17e <parity+0x6>
	}
	return (count%2);
}
 192:	84 2f       	mov	r24, r20
 194:	81 70       	andi	r24, 0x01	; 1
 196:	08 95       	ret

00000198 <main>:


int main(void)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
/***********************************
PORTS initialise
***********************************/
void PORTS_int(void)
{
	DDRA |= (1<<PA0) | (1<<PA1);
 19c:	8a b3       	in	r24, 0x1a	; 26
 19e:	83 60       	ori	r24, 0x03	; 3
 1a0:	8a bb       	out	0x1a, r24	; 26

int main(void)
{
unsigned short n=0;
PORTS_int();
RFM02_init();
 1a2:	9f df       	rcall	.-194    	; 0xe2 <RFM02_init>
/**************************************
Initialise Ug 
**************************************/
void init_Ug()
{
	DDRA |= (1<<PA5) | (1<<PA6);
 1a4:	8a b3       	in	r24, 0x1a	; 26
 1a6:	80 66       	ori	r24, 0x60	; 96
 1a8:	8a bb       	out	0x1a, r24	; 26
unsigned short n=0;
PORTS_int();
RFM02_init();
init_Ug();

set_sleep_mode(SLEEP_MODE_PWR_DOWN);						
 1aa:	85 b7       	in	r24, 0x35	; 53
 1ac:	87 7e       	andi	r24, 0xE7	; 231
 1ae:	80 61       	ori	r24, 0x10	; 16
 1b0:	85 bf       	out	0x35, r24	; 53
PCMSK0 = (1<<PCINT2);
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	82 bb       	out	0x12, r24	; 18
GIMSK = (1<<PCIE0);	// Pin Change on PCINT7..0.
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	8b bf       	out	0x3b, r24	; 59
 1ba:	28 e8       	ldi	r18, 0x88	; 136
 1bc:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1be:	ca ef       	ldi	r28, 0xFA	; 250
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <main+0x36>
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ce:	21 15       	cp	r18, r1
 1d0:	31 05       	cpc	r19, r1
 1d2:	c1 f7       	brne	.-16     	; 0x1c4 <main+0x2c>



	_delay_ms(500);

	WriteCMD(0xC038);
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	90 ec       	ldi	r25, 0xC0	; 192
 1d8:	2f df       	rcall	.-418    	; 0x38 <WriteCMD>


	RMFM02_send(0x1454);	// Sends only 15 bits!!!
 1da:	84 e5       	ldi	r24, 0x54	; 84
 1dc:	94 e1       	ldi	r25, 0x14	; 20
 1de:	5c df       	rcall	.-328    	; 0x98 <RMFM02_send>
	
	send_Ug(20);
 1e0:	84 e1       	ldi	r24, 0x14	; 20
 1e2:	9c df       	rcall	.-200    	; 0x11c <send_Ug>
	
	WriteCMD(0xC000);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 ec       	ldi	r25, 0xC0	; 192
 1e8:	27 df       	rcall	.-434    	; 0x38 <WriteCMD>

	LED1_OFF;
 1ea:	d8 9a       	sbi	0x1b, 0	; 27
	LED2_OFF;
 1ec:	d9 9a       	sbi	0x1b, 1	; 27
 1ee:	28 e8       	ldi	r18, 0x88	; 136
 1f0:	33 e1       	ldi	r19, 0x13	; 19
 1f2:	e8 cf       	rjmp	.-48     	; 0x1c4 <main+0x2c>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
